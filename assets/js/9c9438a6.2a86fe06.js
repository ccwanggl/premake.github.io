"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3360],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},93122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(74848),i=t(28453);const r={title:"Sharing Configuration Settings"},s=void 0,a={id:"Sharing-Configuration-Settings",title:"Sharing Configuration Settings",description:"I'm very interested in having a project A be able to specify information that project B can use to compile and link against project A, without having to repeat that information all over the place.",source:"@site/docs/Sharing-Configuration-Settings.md",sourceDirName:".",slug:"/Sharing-Configuration-Settings",permalink:"/docs/Sharing-Configuration-Settings",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/Sharing-Configuration-Settings.md",tags:[],version:"current",lastUpdatedBy:"Mark Jansen",lastUpdatedAt:1686174472e3,frontMatter:{title:"Sharing Configuration Settings"},sidebar:"docs",previous:{title:"Adding a New Action",permalink:"/docs/Adding-New-Action"},next:{title:"Embedding Frameworks in Xcode for App Distribution",permalink:"/docs/Embedding-Frameworks-in-Xcode"}},c={},d=[];function l(e){const n={blockquote:"blockquote",code:"code",em:"em",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"I'm very interested in having a project A be able to specify information that project B can use to compile and link against project A, without having to repeat that information all over the place."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'There have been discussions on forums new and old about this in the past; search for "usages". It would be great to pull those together here for reference if anyone gets a chance. In the meantime, feel free to add your approaches below.'}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"@starkos:"})," We use functions here. For specifying how to compile and link against a library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- How to declare it\nfunction someLibrary(options)\n   defines { ... }\n   links { ... }\n   options = options or {}\n   if options.someFlag then\n      defines { ... }\n   end\nend\n\n-- How to use it\nproject "someOtherProject"\n   kind "ConsoleApp"\n   someLibrary { someFlag="true" }\n   -- Or, without arguments:\n   someLibrary {}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Please note that relative paths in the function will be relative to where the function is ",(0,o.jsx)(n.em,{children:"used"}),", not where it is ",(0,o.jsx)(n.em,{children:"defined"}),"!"]}),"\n",(0,o.jsx)(n.p,{children:'And for defining "classes" of projects:'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function someComponent_test(name)\n   project(name)\n   kind "ConsoleApp"\n   defines { ... }\n   links { ... }\n   filter {}\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);