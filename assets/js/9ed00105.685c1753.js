"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9004],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=r,d=m["".concat(s,".").concat(f)]||m[f]||c[f]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19733:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={},s=void 0,p={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"configuration",description:"Limits the subsequent build settings to a particular environment.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/configuration.md",tags:[],version:"current",lastUpdatedBy:"starkos",lastUpdatedAt:1631875623,formattedLastUpdatedAt:"9/17/2021",frontMatter:{},sidebar:"docs",previous:{title:"configmap",permalink:"/docs/configmap"},next:{title:"configurations",permalink:"/docs/configurations"}},u=[{value:"Parameters",id:"parameters",children:[],level:3},{value:"Examples",id:"examples",children:[],level:3},{value:"Availability",id:"availability",children:[],level:3},{value:"See Also",id:"see-also",children:[],level:3}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Limits the subsequent build settings to a particular environment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration { "keywords" }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This function has been deprecated in Premake 5.0 beta1.")," Use the new ",(0,o.kt)("a",{parentName:"p",href:"/docs/filter"},"filter()")," function instead; you will get more granular matching and much better performance. ",(0,o.kt)("inlineCode",{parentName:"p"},"configuration()")," will be not supported in Premake 6."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keywords")," is a list of identifiers (see below). When all of the keywords in this list match Premake's current context, the settings that follow the ",(0,o.kt)("inlineCode",{parentName:"p"},"configuration")," statement will be applied. If any of the identifiers are not in the current context the settings will be ignored."),(0,o.kt)("p",null,"The available sources for keywords. Keywords are not case-sensitive."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Configuration names.")," Any of the configuration names supplied to the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/configurations"},"configurations"))," or ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/platforms"},"platforms"))," functions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Action names")," such as ",(0,o.kt)("strong",{parentName:"p"},"vs2010")," or ",(0,o.kt)("strong",{parentName:"p"},"gmake"),". See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/Using-Premake"},"Using Premake")," for a complete list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Command line options"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"System names")," such as ",(0,o.kt)("strong",{parentName:"p"},"windows"),", ",(0,o.kt)("strong",{parentName:"p"},"macosx"),", or ",(0,o.kt)("strong",{parentName:"p"},"xbox360"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Architectures")," such as ",(0,o.kt)("strong",{parentName:"p"},"x32")," or ",(0,o.kt)("strong",{parentName:"p"},"x64"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Toolsets")," such as ",(0,o.kt)("strong",{parentName:"p"},"gcc"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Target kinds")," like ",(0,o.kt)("strong",{parentName:"p"},"ConsoleApp")," or ",(0,o.kt)("strong",{parentName:"p"},"SharedLib"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Languages")," like ",(0,o.kt)("strong",{parentName:"p"},"C++")," or ",(0,o.kt)("strong",{parentName:"p"},"C#"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"File names")," can be used to apply settings to a specific set of source code files; this feature is currently very limited."))),(0,o.kt)("p",null,"In addition to the terms listed above, you may use the ",(0,o.kt)("strong",{parentName:"p"},"*")," and ",(0,o.kt)("strong",{parentName:"p"},"*","*")," wildcards to match more than one term or file. You may also use the modifiers ",(0,o.kt)("strong",{parentName:"p"},"not")," and ",(0,o.kt)("strong",{parentName:"p"},"or")," to build more complex conditions. See the examples below for more information."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,'Define a new symbol which applies only to debug builds; assumes a configuration named "Debug" was defined as part of the workspace.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "Debug"\n  defines { "_DEBUG" }\n')),(0,o.kt)("p",null,"Define a symbol only when targeting Visual Studio 2010."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "vs2010"\n  defines { "VISUAL_STUDIO_2005" }\n')),(0,o.kt)("p",null,"Wildcards can be used to match multiple terms. Define a symbol for all versions of Visual Studio."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "vs*"\n  defines { "VISUAL_STUDIO" }\n')),(0,o.kt)("p",null,"Add a suffix to the debug versions of libraries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration { "Debug", "SharedLib or StaticLib" }\n  targetsuffix "_d"\n\n-- ...or...\nconfiguration { "Debug", "*Lib" }\n  targetsuffix "_d"\n')),(0,o.kt)("p",null,"Apply settings based on the presence of a ",(0,o.kt)("a",{parentName:"p",href:"/docs/Command-Line-Arguments"},"custom command line option"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- Using an option like --localized\nconfiguration { "localized" }\n   files { "src/localizations/**" }\n\n-- Using an option like --renderer=opengl\nconfiguration { "renderer=opengl" }\n   files { "src/opengl/**.cpp" }\n')),(0,o.kt)("p",null,"Although support is currently quite limited, you may also apply settings to a particular file or set of files. This example sets the build action for all PNG image files."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "*.png"\n  buildaction "Embed"\n')),(0,o.kt)("p",null,"In the case of files you may also use the ",(0,o.kt)("strong",{parentName:"p"},"*","*")," wildcard, which will recurse into subdirectories."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "**.png"\n  buildaction "Embed"\n')),(0,o.kt)("p",null,"If multiple keywords are specified, they will be treated as a logical AND. All terms must be present for the block to be applied. This example will apply the symbol only for debug builds on Mac OS X."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration { "debug", "macosx" }\n  defines { "DEBUG_MACOSX" }\n')),(0,o.kt)("p",null,"Multiple terms must use Lua's curly bracket list syntax."),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("strong",{parentName:"p"},"or")," modifier to match against multiple, specific terms."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "linux or macosx"\n  defines { "LINUX_OR_MACOSX" }\n')),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("strong",{parentName:"p"},"not")," to apply the settings to all environments where the identifier is not set."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'configuration "not windows"\n  defines { "NOT_WINDOWS" }\n')),(0,o.kt)("p",null,"Finally, you can reset the configuration filter and remove all active keywords by passing the function an empty table."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"configuration {}\n")),(0,o.kt)("h3",{id:"availability"},"Availability"),(0,o.kt)("p",null,"Premake 4.0 or later. Will be deprecated at some point in 5.x development in favor of ",(0,o.kt)("a",{parentName:"p",href:"/docs/filter"},"filter()"),"."),(0,o.kt)("h3",{id:"see-also"},"See Also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/Filters"},"Filters")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/filter"},"filter"))))}m.isMDXComponent=!0}}]);