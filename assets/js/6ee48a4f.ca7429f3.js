"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[1796],{28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>n});var a=t(96540);const r={},i=a.createContext(r);function o(e){const s=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function n(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:s},e.children)}},73987:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});var a=t(74848),r=t(28453);const i={},o=void 0,n={id:"os/os.matchdirs",title:"os.matchdirs",description:"Perform a wildcard match to locate one or more directories.",source:"@site/docs/os/os.matchdirs.md",sourceDirName:"os",slug:"/os/os.matchdirs",permalink:"/docs/os/os.matchdirs",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/os/os.matchdirs.md",tags:[],version:"current",lastUpdatedBy:"Joao Matos",lastUpdatedAt:1727531119e3,frontMatter:{},sidebar:"docs",previous:{title:"os.locate",permalink:"/docs/os/os.locate"},next:{title:"os.matchfiles",permalink:"/docs/os/os.matchfiles"}},c={},l=[{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Availability",id:"availability",level:3},{value:"Examples",id:"examples",level:3},{value:"See Also",id:"see-also",level:3}];function d(e){const s={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"Perform a wildcard match to locate one or more directories."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'matches = os.matchdirs("pattern")\n'})}),"\n",(0,a.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"pattern"})," is the file system path to search. It may contain single (non-recursive) or double (recursive) asterisk wildcard patterns."]}),"\n",(0,a.jsx)(s.h3,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(s.p,{children:"A list of directories which match the specified pattern. May be empty."}),"\n",(0,a.jsx)(s.h3,{id:"availability",children:"Availability"}),"\n",(0,a.jsx)(s.p,{children:"Premake 4.0 or later."}),"\n",(0,a.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'matches = os.matchdirs("src/*")      -- non-recursive match\nmatches = os.matchdirs("src/**")     -- recursive match\n\nmatches = os.matchdirs("src/test*")  -- may also match partial names\n'})}),"\n",(0,a.jsx)(s.h3,{id:"see-also",children:"See Also"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/docs/os/os.matchfiles",children:"os.matchfiles"})}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);