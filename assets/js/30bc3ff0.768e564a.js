"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2118],{15680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>y});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,y=u["".concat(c,".").concat(d)]||u[d]||g[d]||i;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95802:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(58168),a=(n(96540),n(15680));const i={},o=void 0,l={unversionedId:"gitintegration",id:"gitintegration",isDocsHomePage:!1,title:"gitintegration",description:"Enable git integration to run premake on checkout.",source:"@site/docs/gitintegration.md",sourceDirName:".",slug:"/gitintegration",permalink:"/docs/gitintegration",editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/gitintegration.md",tags:[],version:"current",lastUpdatedBy:"Joris Dauphin",lastUpdatedAt:1726089148,formattedLastUpdatedAt:"9/11/2024",frontMatter:{},sidebar:"docs",previous:{title:"xcodesystemcapabilities",permalink:"/docs/xcodesystemcapabilities"},next:{title:"_ACTION",permalink:"/docs/_ACTION"}},c=[{value:"Parameters",id:"parameters",children:[],level:3},{value:"Applies To",id:"applies-to",children:[],level:3},{value:"Availability",id:"availability",children:[],level:3},{value:"Examples",id:"examples",children:[],level:3}],p={toc:c},s="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(s,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Enable git integration to run premake on checkout."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-lua"},'gitintegration ("value")\n')),(0,a.yg)("h3",{id:"parameters"},"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Action"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Off"),(0,a.yg)("td",{parentName:"tr",align:null},"Disable git integration.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Always"),(0,a.yg)("td",{parentName:"tr",align:null},"Run premake on checkout.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"OnNewFiles"),(0,a.yg)("td",{parentName:"tr",align:null},"Run premake only when files are added/removed or if premake script has changed.")))),(0,a.yg)("h3",{id:"applies-to"},"Applies To"),(0,a.yg)("p",null,"Global scope."),(0,a.yg)("h3",{id:"availability"},"Availability"),(0,a.yg)("p",null,"Premake 5.0.0 beta 3 or later."),(0,a.yg)("h3",{id:"examples"},"Examples"),(0,a.yg)("p",null,"Regenerate autoversion.h with git tag when checkout to another branch."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-lua"},'gitintegration "Always"\n\nlocal locationDir = _OPTIONS["to"]\n\nlocal function autoversion_h()\n    local git_tag, errorCode = os.outputof("git describe --tag --always")\n    if errorCode == 0 then\n        print("git description: ", git_tag)\n        local content = io.readfile("src/autoversion.h.in")\n        content = content:gsub("${GIT_DESC}", git_tag)\n\n        os.mkdir(locationDir)\n        local f, err = os.writefile_ifnotequal(content, path.join(locationDir, "autoversion.h"))\n\n        if (f == 0) then -- file not modified\n        elseif (f < 0) then\n            error(err, 0)\n            return false\n        elseif (f > 0) then\n            print("Generated autoversion.h...")\n        end\n\n        return true\n    else\n        print("`git describe --tag` failed with error code", errorCode, git_tag)\n        return false\n    end\nend\n\nlocal have_autoversion_h = autoversion_h()\n\nworkspace "MyProject"\n    location(locationDir)\n\n    if have_autoversion_h then\n        includedirs { locationDir } -- for generated file (autoversion.h)\n    end\n  -- [..]\n')))}u.isMDXComponent=!0}}]);