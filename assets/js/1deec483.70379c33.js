"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5432],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(96540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},94889:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=s(74848),a=s(28453);const o={title:"Usages"},r=void 0,i={id:"Usages",title:"Usages",description:"See moomalade/premake-usage.",source:"@site/docs/Usages.md",sourceDirName:".",slug:"/Usages",permalink:"/docs/Usages",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/Usages.md",tags:[],version:"current",lastUpdatedBy:"starkos",lastUpdatedAt:1615992656e3,frontMatter:{title:"Usages"}},c={},d=[];function l(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"https://github.com/moomalade/premake-usage",children:"moomalade/premake-usage"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Usages"})," are an idea that has been batted around for years now, but never quite made it to the light of day. The goal it to allow a project script to specify how to ",(0,n.jsx)(t.em,{children:"use"})," a library or component, as opposed to how to build it: what libraries to link, what header files and search paths to include, what symbols to define, and so on."]}),"\n",(0,n.jsxs)(t.p,{children:["The syntax proposal is a new call ",(0,n.jsx)(t.code,{children:"usage"})," to define the settings:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lua",children:'-- Define how to build the project\nproject "MyLibrary"\n   -- \u2026\n\n-- Define how to use the project\nusage "MyLibrary"\n   links { "my-library" }\n   includedirs { "./includes" }\n   defines { "MY_LIBRARY" }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Another project can then pull these settings in by calling ",(0,n.jsx)(t.code,{children:"uses"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lua",children:'project "MyApp"\n    uses { "MyLibrary" }\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);