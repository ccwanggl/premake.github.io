"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[4717],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(96540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},90337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=t(74848),o=t(28453);const a={},i=void 0,c={id:"Starting-Your-New-Action",title:"Starting-Your-New-Action",description:"When developing something as complex as a new exporter, it is a good idea to build it as a module. Doing so helps organize the code, provides a way to automate testing, and makes it easy to share your code with others.",source:"@site/docs/Starting-Your-New-Action.md",sourceDirName:".",slug:"/Starting-Your-New-Action",permalink:"/docs/Starting-Your-New-Action",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/Starting-Your-New-Action.md",tags:[],version:"current",lastUpdatedBy:"KyrietS",lastUpdatedAt:1622582682e3,frontMatter:{}},s={},l=[{value:"Explain.",id:"explain",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["When developing something as complex as a new exporter, it is a good idea to build it as a ",(0,r.jsx)(n.a,{href:"/docs/Developing-Modules",children:"module"}),". Doing so helps organize the code, provides ",(0,r.jsx)(n.a,{href:"/docs/Adding-Unit-Tests",children:"a way to automate testing"}),", and makes it easy to ",(0,r.jsx)(n.a,{href:"/docs/Sharing-Your-Module",children:"share your code with others"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["So let's start by setting up a module containing a really simple action. Create a new file named ",(0,r.jsx)(n.code,{children:"lua.lua"})," and place it into a folder named ",(0,r.jsx)(n.code,{children:"lua"}),". Place this ",(0,r.jsx)(n.code,{children:"lua"})," folder ",(0,r.jsx)(n.a,{href:"/docs/Locating-Scripts",children:"somewhere Premake can find it"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Copy this simple skeleton action definition into your ",(0,r.jsx)(n.code,{children:"lua.lua"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- lua/lua.lua\n\npremake.modules.lua = {}\nlocal m = premake.modules.lua\n\nlocal p = premake\n\nnewaction {\n\ttrigger = "lua",\n\tdescription = "Export project information as Lua tables",\n\n\tonStart = function()\n\t\tprint("Starting Lua generation")\n\tend,\n\n\tonWorkspace = function(wks)\n\t\tprintf("Generating Lua for workspace \'%s\'", wks.name)\n\tend,\n\n\tonProject = function(prj)\n\t\tprintf("Generating Lua for project \'%s\'", prj.name)\n\tend,\n\n\texecute = function()\n\t\tprint("Executing Lua action")\n\tend,\n\n\tonEnd = function()\n\t\tprint("Lua generation complete")\n\tend\n}\n\nreturn m\n'})}),"\n",(0,r.jsxs)(n.p,{children:["I'll explain what all of that means in a moment, but first let's try it out and make sure everything is working. To see our new action in action, we'll need to require it into an existing project's ",(0,r.jsx)(n.code,{children:"premake5.lua"})," script."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'require "lua"  -- add this to load your module\n\nworkspace "MyWorkspace"\n\tconfigurations { "Debug", "Release" }\n\nproject "MyProject"\n\t-- etc.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then we can generate that project with our new ",(0,r.jsx)(n.code,{children:"lua"})," action and see the ",(0,r.jsx)(n.code,{children:"print()"})," functions get called."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ premake5 lua\nBuilding configurations...\nRunning action 'lua'...\nStarting Lua generation\nGenerating Lua for workspace 'MyWorkspace'\nGenerating Lua for project 'MyProject'\nExecuting Lua action\nLua generation complete\nDone.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["(Quick side note: if you'd like to make this or any third-party module available without having to add a ",(0,r.jsx)(n.code,{children:"require()"})," to every project script, just put that ",(0,r.jsx)(n.code,{children:'require("lua")'})," call in your ",(0,r.jsx)(n.a,{href:"/docs/System-Scripts",children:"system script"})," instead.)"]}),"\n",(0,r.jsx)(n.h3,{id:"explain",children:"Explain."}),"\n",(0,r.jsxs)(n.p,{children:["We start out by creating a table to hold our module's interface. Since we'll be referencing this interface quite a lot in our code, we assign it to the shortcut ",(0,r.jsx)(n.code,{children:"m"}),' for "module".']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"premake.modules.lua = {}\nlocal m = premake.modules.lua\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We will also be calling functions from the ",(0,r.jsx)(n.code,{children:"premake"})," namespace frequently, so we assign that to the shortcut ",(0,r.jsx)(n.code,{children:"p"}),' for "premake".']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local p = premake\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we're ready to register our new action with Premake, using ",(0,r.jsx)(n.code,{children:"newaction()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'newaction {\n\ttrigger = "lua",\n\tdescription = "Export project information as Lua",\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"trigger"})," is the token that should be typed on the Premake command line to cause our action to be triggered (i.e. ",(0,r.jsx)(n.code,{children:"premake5 lua"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"description"})," is the string which should appear in Premake's help text to describe what our action does. You can view this by running ",(0,r.jsx)(n.code,{children:"premake5 --help"})," against the project script we modified above."]}),"\n",(0,r.jsx)(n.p,{children:"Next, we register callbacks for Premake to use when it is time to export the project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'onStart = function()\n\tprint("Starting Lua generation")\nend,\n\nonWorkspace = function(wks)\n\tprintf("Generating Lua for workspace \'%s\'", wks.name)\nend,\n\nonProject = function(prj)\n\tprintf("Generating Lua for project \'%s\'", prj.name)\nend,\n\nexecute = function()\n\tprint("Executing Lua action")\nend,\n\nonEnd = function()\n\tprint("Lua generation complete")\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"All of these callbacks are optional; you only need to include the ones you are actually interested in receiving."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"onStart"})," is called first to indicate that processing has begun."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"onWorkspace"})," is called once for every workspace that was declared, via the ",(0,r.jsx)(n.a,{href:"/docs/workspace",children:(0,r.jsx)(n.code,{children:"workspace"})})," function, in the user's project script."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"onProject"})," is called once for every project that was declared, via the ",(0,r.jsx)(n.a,{href:"/docs/project",children:(0,r.jsx)(n.code,{children:"project"})})," function, in the user's project script."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"execute"})," is called after all projects and workspaces have been processed. This is a good place to put more general code that doesn't require a workspace or project as input, and should only run once."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"onEnd"})," is called to indicate the processing is complete."]}),"\n",(0,r.jsxs)(n.p,{children:["Finally, we return our module's interface back to the caller (the ",(0,r.jsx)(n.code,{children:'require("lua")'})," call in our project or system script)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"return m\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);