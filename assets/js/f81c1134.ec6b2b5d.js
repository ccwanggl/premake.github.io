"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8130],{116:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/12/22/community-update-12","metadata":{"permalink":"/blog/2024/12/22/community-update-12","source":"@site/blog/2024-12-22-community-update-12.md","title":"Roadmap to 5.0","description":"Premake 5.0 is the next major release of the popular build configuration tool, designed to simplify and streamline the process of generating project files for various development environments. This roadmap outlines the key milestones that will be achieved in the journey towards the first stable release of Premake 5.0.","date":"2024-12-22T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":3.31,"hasTruncateMarker":false,"authors":[{"name":"Nick Clark","title":"Premake Developer","url":"https://github.com/nickclark2016","imageURL":"https://github.com/nickclark2016.png","key":"nickclark2016","page":null}],"frontMatter":{"title":"Roadmap to 5.0","tags":["community-updates"],"authors":"nickclark2016"},"unlisted":false,"nextItem":{"title":"Community Update #11","permalink":"/blog/2024/11/09/community-update-11"}},"content":"Premake 5.0 is the next major release of the popular build configuration tool, designed to simplify and streamline the process of generating project files for various development environments. This roadmap outlines the key milestones that will be achieved in the journey towards the first stable release of Premake 5.0.\\n\\n## Milestones\\n1. **Explicit APIs for Flags**: In the past, Premake has support various flags for project generation, such as `MFC` and `LinkTimeOptimization`. In the 5.0 stable release, all flags will have been replaced by dedicated APIs. The current development builds have already begun this process.\\n2. **Deprecation and Removal of the gmake Exporter**: For many years now, the `gmake2` exporter has been our suggested generator for GNU Makefiles. As the 5.0 stable release approaches, `gmake` will be moved to `gmakelegacy` and `gmake2` will become `gmake`. It is encouraged that users that are still using the legacy `gmake` exporter to try `gmake2` and report any deficiencies. The deprecation and removal process will happen over the next several beta releases, with planned complete removal within 2025.\\n3. **Removal of Existing Deprecated APIs**: There are many existing APIs that have been deprecated for several releases now in Premake, both functions and enumerations. To reduce the surface space of the API, existing deprecated APIs with replacements will be removed. Deprecated APIs without a direct replacement will be provided with either a replacement API or instructions on how to replace the behavior (where possible).\\n\\n## Key Planned Improvements\\n1. **Better Documentation**: For the 5.0 release, the Premake team will be ensuring that all APIs and public-facing behaviors are sufficiently documented. This includes making sure documentation exists for each of these APIs, as well as sufficient examples of their usage. In addition to increased documentation of the Premake APIs, the guides on how to use and extend Premake will be reviewed to ensure they still demonstrate best practices and reflect upcoming API changes. The documentation will also be reviewed to ensure that there are sufficient examples of extending Premake\'s functionality.\\n2. **General Bug Fixes**: There are currently many open bug reports on GitHub for Premake. The team plans to prioritize the bugs and add fixes and tests where possible to prevent future regressions.\\n3. **Improved Extension Support**: In Premake 5.0-beta3, extending core functionality in Premake, especially exporters, is tedious. As the 5.0 stable release approaches, the team plans to review the mechanisms to extend toolsets and exporters. This may incur a breaking change to external modules using the existing extension mechanisms; however, documentation will be updated as these occur as well as a transition period. For these changes, community feedback is highly encouraged to make sure this is done in a way that everyone benefits from.\\n4. **Improved CI**: Currently, Premake has many build pipelines for verifying builds on various architectures, as well as running the test suites on those platforms. We are investigating improvements to the CI process, such as improved release artifact generation and more robust pipelines. This effort will also include general improvements to the release creation process.\\n5. **Increased Testing Coverage**: Premake currently has a large suite of tests, but there are gaps. As part of our push to 5.0, the development team plans to identify and add tests for the gaps in both our public API and internal functionality.\\n\\nThese goals are not all encompassing of Premake 5.0\'s first stable release, but summarize the high level milestones that the team intends to meet. We look forward to any feedback you have regarding the upcoming changes to Premake. If you are looking to contribute to Premake but don\'t know where to start, take a look at the GitHub issues list or open a discussion and a member of the team will be able to direct you to where to begin.\\n\\nPremake would not be possible without the support of the community, our contributors, and our sponsors on [Open Collective](https://opencollective.com/premake). Thank you for your continued support throughout this exciting journey towards 5.0.\\n\\nThe Premake Team"},{"id":"/2024/11/09/community-update-11","metadata":{"permalink":"/blog/2024/11/09/community-update-11","source":"@site/blog/2024-11-09-community-update-11.md","title":"Community Update #11","description":"It\'s been almost 3 years since the last community update, and over 2 years since the last beta.  Without further ado, here are the community contributions fromt the last 2 years.","date":"2024-11-09T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":5.895,"hasTruncateMarker":true,"authors":[{"name":"Nick Clark","title":"Premake Developer","url":"https://github.com/nickclark2016","imageURL":"https://github.com/nickclark2016.png","key":"nickclark2016","page":null}],"frontMatter":{"title":"Community Update #11","tags":["community-updates"],"authors":"nickclark2016"},"unlisted":false,"prevItem":{"title":"Roadmap to 5.0","permalink":"/blog/2024/12/22/community-update-12"},"nextItem":{"title":"Community Update #10","permalink":"/blog/2021/11/21/community-update-10"}},"content":"It\'s been almost 3 years since the last community update, and over 2 years since the last beta.  Without further ado, here are the community contributions fromt the last 2 years.\\n\\n### Road to Premake 5.0\\n\\nMost of the heavy lifting for Premake 5.0 is done, but there are a few major milestones left for leaving beta and going to full release.\\n\\n1. Deprecation and removal of the [flags](https://premake.github.io/docs/flags) API. Flags are a remenant of older models. Instead, flags will be migrated to the idiomatic Premake approach of dedicated APIs. This isn\'t going to be as trivial as \\"On\\" and \\"Off\\", as many of these flags represent a larger group of behaviors.\\n\\n2. Deprecation and removal of the gmake exporter in favor of gmake2. This has been one of the goals for many years now, and we\'re confident that gmake2 is in a spot where it can be \\"promoted\\" to the primary GNU makefile exporter. In the next release, gmake will likely be renamed and deprecated, and gmake will describe the gmake2 exporter. This will be a breaking change, but we feel it is the best way forward to remove the bifurcation of the makefile exporter. Until the time when we do remove the legacy gmake exporter, users current leveraging the legacy exporter are encouraged to try out the gmake2 exporter and report any defects or feature deficiencies in order to make the change as seamless as possible.\\n\\nIn order to make sure we capture the needs of users for the 5.0 stable release, I encourage you to open issues or discussions to ensure the transition to 5.0 is an easy user experience.\\n\\n{/* truncate */}\\n\\n### Community Contributions\\n\\n- [#1841](https://github.com/premake/premake-core/pull/1841)  Update shadertype.md (@TylerDahl)\\n- [#1842](https://github.com/premake/premake-core/pull/1842)  Update shaderobjectfileoutput.md (@TylerDahl)\\n- [#1843](https://github.com/premake/premake-core/pull/1843)  Update shadermodel.md (@TylerDahl)\\n- [#1942](https://github.com/premake/premake-core/pull/1942)  Release/v5.0 beta2 (@premake)\\n- [#1951](https://github.com/premake/premake-core/pull/1951)  Fix custom build with missing directory (@Jarod42)\\n- [#1952](https://github.com/premake/premake-core/pull/1952)  vstudio: add usestandardpreprocessor option (@flakey5)\\n- [#1954](https://github.com/premake/premake-core/pull/1954)  Add newoption.catagory to documentation, mark os.is as deprecated (@thomashope)\\n- [#1959](https://github.com/premake/premake-core/pull/1959)  Use admonitions in documentation for things marked as deprecated (@thomashope)\\n- [#1970](https://github.com/premake/premake-core/pull/1970)  Updated Android docs (@LORgames)\\n- [#1971](https://github.com/premake/premake-core/pull/1971)  Fixed a couple of issues with the Custom Rules docs (@LORgames)\\n- [#1975](https://github.com/premake/premake-core/pull/1975)  Strip linking decorators for sibling projects (@LORgames)\\n- [#1976](https://github.com/premake/premake-core/pull/1976)  Android projects use IncludePath instead of ExternalIncludePath (@LORgames)\\n- [#1978](https://github.com/premake/premake-core/pull/1978)  Added support for CopyFileToFolders via Copy buildaction (@LORgames)\\n- [#1980](https://github.com/premake/premake-core/pull/1980)  Added UWP support for VS projects (@LORgames)\\n- [#1981](https://github.com/premake/premake-core/pull/1981)  Update usefullpaths.md (@nepp95)\\n- [#1985](https://github.com/premake/premake-core/pull/1985)  Update defaultplatform.md (@GiacomoMaino)\\n- [#1992](https://github.com/premake/premake-core/pull/1992)  Add AntTarget to vsandroid project file (@0x416c69)\\n- [#1997](https://github.com/premake/premake-core/pull/1997)  Add validation for toolset. (@Jarod42)\\n- [#2003](https://github.com/premake/premake-core/pull/2003)  Allow to specify \\"--cc=msc\\" as command line. (@Jarod42)\\n- [#2004](https://github.com/premake/premake-core/pull/2004)  Handle entrypoint for msc. (@Jarod42)\\n- [#2006](https://github.com/premake/premake-core/pull/2006)  `externalwarnings`, `externalanglebrackets`, `externalincludedirs` was already available in vs2019 (@Jarod42)\\n- [#2009](https://github.com/premake/premake-core/pull/2009)  Fix typos in comment. (@Jarod42)\\n- [#2010](https://github.com/premake/premake-core/pull/2010)  Typo fix (@brno32)\\n- [#2011](https://github.com/premake/premake-core/pull/2011)  Add support for unity builds (@Sharlock93)\\n- [#2022](https://github.com/premake/premake-core/pull/2022)  Fix Debian build recepie. (@KOLANICH-tools)\\n- [#2023](https://github.com/premake/premake-core/pull/2023)  Fix support of openmp for visual studio with clang toolset. (@Jarod42)\\n- [#2024](https://github.com/premake/premake-core/pull/2024)  Fix typo in bytecode description. (@Jarod42)\\n- [#2025](https://github.com/premake/premake-core/pull/2025)  Fix missing targets file issue in some C++ nuget packages (@hanagasira)\\n- [#2027](https://github.com/premake/premake-core/pull/2027)  `sanitize { \\"Address\\" }` should set link flags too for gcc/clang. (@Jarod42)\\n- [#2028](https://github.com/premake/premake-core/pull/2028)  Add support for idirafter flag in GCC/Clang (@nickclark2016)\\n- [#2032](https://github.com/premake/premake-core/pull/2032)  Change to minimize differences after Codelite re-save the file (@Jarod42)\\n- [#2034](https://github.com/premake/premake-core/pull/2034)  Robustify `http.get` tests with retry. (@Jarod42)\\n- [#2039](https://github.com/premake/premake-core/pull/2039)  gmake2: Fix detecting msdos vs posix shell (@Peter0x44)\\n- [#2042](https://github.com/premake/premake-core/pull/2042)  Fix `compileas \\"C\\"` and `\\"C++\\"` for gcc (shared with clang). (@Jarod42)\\n- [#2052](https://github.com/premake/premake-core/pull/2052)  Fix typo (@rafaelcn)\\n- [#2061](https://github.com/premake/premake-core/pull/2061)  Fixed issue with Codelite unit test (@LORgames)\\n- [#2064](https://github.com/premake/premake-core/pull/2064)  Updated actions from v2 to v3 (@LORgames)\\n- [#2066](https://github.com/premake/premake-core/pull/2066)  Improve error message of `include` (@Jarod42)\\n- [#2070](https://github.com/premake/premake-core/pull/2070)  Add support of prelink steps (similar to prebuild steps) for Codelite. (@Jarod42)\\n- [#2072](https://github.com/premake/premake-core/pull/2072)  Fix prelink step dependencies for gmake (to be done after compilation). (@Jarod42)\\n- [#2075](https://github.com/premake/premake-core/pull/2075)  remove trailing whitespaces and add new line at eof (@hanagasira)\\n- [#2076](https://github.com/premake/premake-core/pull/2076)  Allow to select specific version of msc in command line. (@Jarod42)\\n- [#2081](https://github.com/premake/premake-core/pull/2081)  Add some missing flags for msc toolset (@Jarod42)\\n- [#2084](https://github.com/premake/premake-core/pull/2084)  Update debugdir.md docs to clarify feature support (@thomashope)\\n- [#2087](https://github.com/premake/premake-core/pull/2087)  Add clarification for relative paths (@learn-more)\\n- [#2088](https://github.com/premake/premake-core/pull/2088)  Fix nil indexing for codelite (@Jarod42)\\n- [#2090](https://github.com/premake/premake-core/pull/2090)  Add support to `undefines` for Codelite. (@Jarod42)\\n- [#2102](https://github.com/premake/premake-core/pull/2102)  remove reference to non existent example. (@mcarlson-nvidia)\\n- [#2104](https://github.com/premake/premake-core/pull/2104)  Add VS2022 to list of valid kinds for Android Packaging (@premake)\\n- [#2117](https://github.com/premake/premake-core/pull/2117)  Require unistd.h for macosx in libzip (@nickclark2016)\\n- [#2118](https://github.com/premake/premake-core/pull/2118)  Changes target of HTTP tests to hopefully resolve test issues in CI (@nickclark2016)\\n- [#2122](https://github.com/premake/premake-core/pull/2122)  Fix `premake.findProjectScript` of previous commit. (@Jarod42)\\n- [#2127](https://github.com/premake/premake-core/pull/2127)  Fixes for using debugger under Linux (@vadz)\\n- [#2131](https://github.com/premake/premake-core/pull/2131)  Use call array for MSVS filters file generation too (@vadz)\\n- [#2135](https://github.com/premake/premake-core/pull/2135)  Fix libzip missing a library (@KanuX-14)\\n- [#2172](https://github.com/premake/premake-core/pull/2172)  Custom LLVM Versions for VS2019+ (@nickclark2016)\\n- [#2187](https://github.com/premake/premake-core/pull/2187)  Enable code analysis via clang-tidy in Visual Studio (@theComputeKid)\\n- [#2194](https://github.com/premake/premake-core/pull/2194)  [vs*] Allow to have per-file `cdialect`/`cppdialect`. (@Jarod42)\\n- [#2195](https://github.com/premake/premake-core/pull/2195)  [vs2010+] Handle `compileas` for files with \\"unknown\\" extensions. (@Jarod42)\\n- [#2203](https://github.com/premake/premake-core/pull/2203)  Add CA root certificate path for Haiku (@augiedoggie)\\n- [#2217](https://github.com/premake/premake-core/pull/2217)  Add Library to available shadertypes (@vkaytsanov)\\n- [#2237](https://github.com/premake/premake-core/pull/2237)  [CI] add dependabot.yml to maintain version action up to date (@Jarod42)\\n- [#2238](https://github.com/premake/premake-core/pull/2238)  Bump the github-actions group with 3 updates (@premake)\\n- [#2243](https://github.com/premake/premake-core/pull/2243)  Fix stack manipulation in Premake\'s `luaL_loadfilex` override. (@tritao)\\n- [#2251](https://github.com/premake/premake-core/pull/2251)  Add a `os.hostarch()` function to get the host system architecture. (@tritao)\\n- [#2252](https://github.com/premake/premake-core/pull/2252)  Document `os.rename` and `os.getenv` APIs (@tritao)\\n- [#2253](https://github.com/premake/premake-core/pull/2253)  Add `term.clearToEndOfLine` and `term.moveLeft` API additions. (@tritao)\\n- [#2254](https://github.com/premake/premake-core/pull/2254)  Adds `desktop` system tag to desktop systems. (@tritao)\\n- [#2255](https://github.com/premake/premake-core/pull/2255)  Move sanitize, visibility and inlinesvisibility to shared table. (@alex-rass-88)\\n- [#2261](https://github.com/premake/premake-core/pull/2261)  Add tests for `table.merge`. (@tritao)\\n- [#2263](https://github.com/premake/premake-core/pull/2263)  Adds a new `os.targetarch()` function. (@tritao)\\n- [#2264](https://github.com/premake/premake-core/pull/2264)  Show error messages from broken includes (@richard-sim)\\n- [#2268](https://github.com/premake/premake-core/pull/2268)  Re-structure common docs files into sub-folders. (@tritao)\\n- [#2269](https://github.com/premake/premake-core/pull/2269)  Upgrade docs to latest Docusaurus version. (@tritao)\\n- [#2271](https://github.com/premake/premake-core/pull/2271)  Add `linker` flag and `LLD` support. (@tritao)\\n- [#2272](https://github.com/premake/premake-core/pull/2272)  Fixed issue with include failing to find embedded files (@LORgames)\\n- [#2274](https://github.com/premake/premake-core/pull/2274)  Port Premake to Cosmopolitan Libc (@tritao)\\n- [#2277](https://github.com/premake/premake-core/pull/2277)  Add C++23 cppdialect (@jlaumon)\\n- [#2278](https://github.com/premake/premake-core/pull/2278)  Prevent empty arrays as expected values for test.contains and test.excludes (@LORgames)\\n- [#2279](https://github.com/premake/premake-core/pull/2279)  Added ci job to simplify required checks in PRs (@LORgames)\\n- [#2280](https://github.com/premake/premake-core/pull/2280)  Upgrade `libcurl` to latest. (@tritao)\\n- [#2281](https://github.com/premake/premake-core/pull/2281)  Fix vstudio/MSC not supporting the C++23 flag yet (@jlaumon)\\n- [#2283](https://github.com/premake/premake-core/pull/2283)  Miscelanneous cleanups (@tritao)\\n- [#2284](https://github.com/premake/premake-core/pull/2284)  Fix `os.host` for Cosmopolitan build (@tritao)\\n- [#2287](https://github.com/premake/premake-core/pull/2287)  [doc] Write doc for `unsignedchar` (@Jarod42)\\n- [#2294](https://github.com/premake/premake-core/pull/2294)  Add projects web and github (@Jarod42)\\n- [#2299](https://github.com/premake/premake-core/pull/2299)  Remove generated \\"website/node_modules\\"\'s files from project (@Jarod42)\\n- [#2301](https://github.com/premake/premake-core/pull/2301)  Fix spelling insice -> inside (@jonesy-b-dev)\\n- [#2316](https://github.com/premake/premake-core/pull/2316)  Update modules.md (@day-garwood)\\n\\nAdditional gratitude and good wishes to everyone who helped review pull requests and triage issues this cycle. Projects like this don\'t work without you.\\n\\n<div style={{textAlign: \'center\'}}>\\n\\t<a href=\\"https://opencollective.com/_fivem\\">\\n\\t\\t<img src=\\"https://images.opencollective.com/_fivem/2f78b5f/logo/128.png\\"/>\\n\\t</a>\\n</div>\\n\\nA big shout out to our premier sponsor **[Cfx.re](https://opencollective.com/_fivem)** and all [our monthly backers](https://opencollective.com/premake#section-contributors)\u2014be sure to check out their work and support them back if you can!\\n\\nWe welcome questions, suggestions, and concerns. Message or DM us at [@premakeapp](https://twitter.com/premakeapp) or [open a discussion on GitHub](https://github.com/premake/premake-core/discussions)."},{"id":"/2021/11/21/community-update-10","metadata":{"permalink":"/blog/2021/11/21/community-update-10","source":"@site/blog/2021-11-21-community-update-10.md","title":"Community Update #10","description":"Premake 5.0-beta1! \ud83e\udd73","date":"2021-11-21T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":3.62,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #10","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #11","permalink":"/blog/2024/11/09/community-update-11"},"nextItem":{"title":"Community Update #9","permalink":"/blog/2021/08/01/community-update-9"}},"content":"### Premake 5.0-beta1! \ud83e\udd73\\n\\nAfter one of the world\'s longest alpha cycles, Premake5 has finally entered beta! I don\'t know about you, but I definitely had a drink to celebrate. Might have been two, even. Probably.\\n\\nAs [previously discussed](/blog/2021/08/01/community-update-9#the-path-to-50), we\'ve started the process of stabilizing 5.0 and shifting breaking changes over to the new v6.x branch. We\'ve [set up a milestone to track our progress](https://github.com/premake/premake-core/milestone/3) toward a stable 5.0 release, and this is the first step in working it down.\\n\\nMost of the changes in the queue are under-the-hood: release automation, bootstrapping, and unit test fixes. The only potentially significant breaking change remaining is [promoting the `gmake2` exporter](https://github.com/premake/premake-core/issues/1099), which I will be prioritizing for the next beta. If you happen to still be using the older `gmake` exporter, please give `gmake2` a try and let us know if you encounter issues! Most fixes have been going to `gmake2` lately, so we expect your experience will be a good one.\\n\\n{/* truncate */}\\n\\n### Premake6\\n\\nAs of this morning, Premake6 is now \\"self-hosting\\" on Visual Studio, Make, and Xcode, meaning that it can generate its own project files, which can then be used to build Premake6. This is a big milestone, since we can now move past isolated unit tests and actually verify our changes with working builds on all three toolsets. All of Premake\'s core functionality is now fully online, and we\'re shifting our focus to prioritizing and porting individual features. Still lots of hardcoded settings and to-dos, but full speed ahead!\\n\\n_(Speaking of which: I know the pace is slow&mdash;definitely slower than I would like&mdash;but thanks to [our backers](#our-sponsors) it\u2019s steady progress. For a bunch of nights-and-weekends part-timers we\u2019re doing alright.)_\\n\\nI\'m currently taking a bug fix & cleanup pass over what we have so far, and filling in gaps in the documentation to make sure we\'re not leaving too much debt behind. High priority next steps include rethinking how we abstract toolsets like GCC & Clang, so we can push ahead implementing new features on top of those abstractions. And then implementing links and (...drum roll...) _[usages](https://github.com/premake/premake-core/issues/1346)_ (yes, really!) so we can start linking projects and their dependencies together.\\n\\nHat tip to [@nickclark2016](https://github.com/nickclark2016) for tackling the new makefile exporter!\\n\\n### Community Contributions\\n\\nYay open source development! \ud83c\udf89 Big shout out to everyone who took the time to contribute this cycle.\\n\\n- [#1629](https://github.com/premake/premake-core/pull/1629) Add support for macOS universal binary ([@tempura-sukiyaki](https://github.com/sukiyaki))\\n- [#1661](https://github.com/premake/premake-core/pull/1661) Add `frameworkdirs` support to gmake & gmake2 with gcc/clang toolsets ([@depinxi](https://github.com/depinxi))\\n- [#1672](https://github.com/premake/premake-core/pull/1672) C# Symbol Premake \u2192 VS Mapping Changes ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1680](https://github.com/premake/premake-core/pull/1680) Fix some build issues with mingw ([@Biswa96](https://github.com/Biswa96))\\n- [#1687](https://github.com/premake/premake-core/pull/1687) Update deprecated entry for newaction ([@Jarod42](https://github.com/Jarod42))\\n- [#1704](https://github.com/premake/premake-core/pull/1704) VS2022 Exporter ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1710](https://github.com/premake/premake-core/pull/1710) Add support for SSE 4.2 ([@ActuallyaDeviloper](https://github.com/ActuallyaDeviloper))\\n- [#1712](https://github.com/premake/premake-core/pull/1712) Add OpenMP support for Visual Studio ([@T-rvw](https://github.com/rvw))\\n- [#1713](https://github.com/premake/premake-core/pull/1713) Upgrade docusaurus version to beta.6 ([@KyrietS](https://github.com/KyrietS))\\n- [#1715](https://github.com/premake/premake-core/pull/1715) Docs maintenance ([@KyrietS](https://github.com/KyrietS))\\n- [#1718](https://github.com/premake/premake-core/pull/1718) Deprecate `configuration()` ([@starkos](https://github.com/starkos))\\n- [#1720](https://github.com/premake/premake-core/pull/1720) Improve `justmycode` ([@T-rvw](https://github.com/rvw))\\n- [#1721](https://github.com/premake/premake-core/pull/1721) Add custom rules for Gmake2 & Codelite ([@Jarod42](https://github.com/Jarod42))\\n- [#1723](https://github.com/premake/premake-core/pull/1723) Add configuration condition to VS csproj references ItemGroup ([@cicanci](https://github.com/cicanci))\\n- [#1726](https://github.com/premake/premake-core/pull/1726) Updated cdialect and cppdialect docs ([@LORgames](https://github.com/LORgames))\\n- [#1727](https://github.com/premake/premake-core/pull/1727) Updated architecture docs ([@LORgames](https://github.com/LORgames))\\n- [#1728](https://github.com/premake/premake-core/pull/1728) Add action to check for and generate missing documentation ([@LORgames](https://github.com/LORgames))\\n- [#1730](https://github.com/premake/premake-core/pull/1730) Added missing `compileas` values to docs ([@LORgames](https://github.com/LORgames))\\n- [#1734](https://github.com/premake/premake-core/pull/1734) Add VS 2022 bootstrapping support ([@afxw](https://github.com/afxw))\\n- [#1736](https://github.com/premake/premake-core/pull/1736) Update showcase to include Orx ([@sausagejohnson](https://github.com/sausagejohnson))\\n- [#1737](https://github.com/premake/premake-core/pull/1737) Change Visual Studio Version to 17 so sln is opened with VS2022 ([@simco50](https://github.com/simco50))\\n- [#1739](https://github.com/premake/premake-core/pull/1739) Fix #1628 failing macOS os.findlib() test ([@starkos](https://github.com/starkos))\\n- [#1744](https://github.com/premake/premake-core/pull/1744) Add check for missing values in documentation ([@LORgames](https://github.com/LORgames))\\n- [#1745](https://github.com/premake/premake-core/pull/1745) Adding documentation for module options ([@hannes-harnisch](https://github.com/harnisch))\\n- [#1749](https://github.com/premake/premake-core/pull/1749) Changed C++20 to emit C++20 instead of C++Latest in MSVC ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1752](https://github.com/premake/premake-core/pull/1752) Added C17/GNU17 support to gmake/gmake2 exporters ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1753](https://github.com/premake/premake-core/pull/1753) Update documentation link in README ([@nickclark2016](https://github.com/nickclark2016))\\n\\nExtra thanks to the unsung heroes not mentioned here who helped review pull requests, triage issues, and generally keep the machine humming.\\n\\n### Our Sponsors {#our-sponsors}\\n\\n<div style={{textAlign: \'center\'}}>\\n\\t<a href=\\"https://opencollective.com/_fivem\\">\\n\\t\\t<img src=\\"https://images.opencollective.com/_fivem/2f78b5f/logo/128.png\\"/>\\n\\t</a>\\n</div>\\n\\nWhich brings us at last to our regular _thank you_ & shout out to our premier sponsor **[Cfx.re](https://opencollective.com/_fivem)** as well as all [our monthly backers](https://opencollective.com/premake#section-contributors)\u2014be sure to check out their work and support them back if you can!\\n\\nI welcome questions, suggestions, and concerns. Message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at [starkos@industriousone.com](mailto:starkos@industriousone.com), or [open a discussion on GitHub](https://github.com/premake/premake-core/discussions)."},{"id":"/2021/08/01/community-update-9","metadata":{"permalink":"/blog/2021/08/01/community-update-9","source":"@site/blog/2021-08-01-community-update-9.md","title":"Community Update #9","description":"I can\'t believe we\'re already eight months into 2021, how did this happen.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":3.05,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #9","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #10","permalink":"/blog/2021/11/21/community-update-10"},"nextItem":{"title":"Community Update #8","permalink":"/blog/2021/04/20/community-update-8"}},"content":"I can\'t believe we\'re already eight months into 2021, how did this happen.\\n\\n### Branch, don\'t backport\\n\\nIn the last update, I asked for input on where the work going into [premake-next](https://github.com/starkos/premake-next) should end up: branch a new 6.x major version, or backport the changes to 5.x? There was [solid consensus](https://github.com/premake/premake-core/discussions/1616) that premake-next should be treated as a new major version, with v5 upgraded to a stable release for on-going support. Thanks to everyone who participated and offered feedback!\\n\\nWith that settled, I\'ve archived the premake-next repository and moved all development to [a new 6.x branch on premake-core](https://github.com/premake/premake-core/tree/6.x). As of the next release, I\'ll be upgrading the status of 5.0 from alpha to beta, with the intention of making the first stable release shortly.\\n\\n### The Path to 5.0\\n\\nPremake\'s perpetual alpha status [causes confusion](https://github.com/premake/premake-core/issues/1536) and makes it [difficult for some people to adopt](https://github.com/premake/premake-core/issues/1423). We\'ve been hanging on to that label in the hope we\'d get a chance to overhaul the makefile and Xcode exporters. But now that we have a v6 branch it makes sense break things over there instead, and get v5 to a stable release sooner rather than later.\\n\\nI\'ve [opened a 5.0 milestone](https://github.com/premake/premake-core/milestone/3) on the project and will be assigning a few issues to myself there. If you have a backward-compatibility breaking change that you feel must get in before 5.0 becomes stable, open or escalate an issue ASAP so we can get it on the roadmap. And as ever, we\'re all really busy, so any help getting this over the finish line is much appreciated!\\n\\n### Premake6\\n\\nIn other news, Premake6 can now generate its own Visual Studio project files and bootstrap itself. That doesn\'t sound very impressive, but it does means that all of the under the hood stuff is now online and working as intended, and a full vertical slice has been completed. \ud83c\udf89\\n\\n[@nickclark2016](https://github.com/nickclark2016) has volunteered to begin looking into a new-and-improved makefile exporter, which frees me up to start looking at Xcode and improving the way we represent toolsets like Clang and GCC. The stable release of 5.0 is likely to take up all the air in the room for a bit, but hopefully I can report progress on those soon.\\n\\n{/* truncate */}\\n\\n### Community Contributions\\n\\nThe community keeps things rolling\u2014many thanks to everyone listed here!\\n\\n- [#1570](https://github.com/premake/premake-core/pull/1570) Initial C++20 module support for Visual Studio ([@hannes-harnisch](https://github.com/hannes-harnisch))\\n- [#1625](https://github.com/premake/premake-core/pull/1625) Remove \\"*ng\\" action deprecation and auto-fix ([@noresources](https://github.com/noresources))\\n- [#1635](https://github.com/premake/premake-core/pull/1635) Fix typo in Using Premake documentation ([@abhiss](https://github.com/abhiss))\\n- [#1638](https://github.com/premake/premake-core/pull/1638) Fix broken links in docs ([@KyrietS](https://github.com/KyrietS))\\n- [#1642](https://github.com/premake/premake-core/pull/1642) Fix spelling mistake ([@Troplo](https://github.com/Troplo))\\n- [#1644](https://github.com/premake/premake-core/pull/1644) Fix author name and update time on pages ([@KyrietS](https://github.com/KyrietS))\\n- [#1645](https://github.com/premake/premake-core/pull/1645) Add missing support for prebuildmessage/postbuildmessage for Codelite ([@Jarod42](https://github.com/Jarod42))\\n- [#1649](https://github.com/premake/premake-core/pull/1649) Fix curl header search path ([@depinxi](https://github.com/depinxi))\\n- [#1654](https://github.com/premake/premake-core/pull/1654) xcode4: Fix missing link of sibling project with custom targetextension ([@depinxi](https://github.com/depinxi))\\n- [#1655](https://github.com/premake/premake-core/pull/1655) Compiler Version support for Visual Studion 2017+ ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1657](https://github.com/premake/premake-core/pull/1657) Renormalize line endings ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1663](https://github.com/premake/premake-core/pull/1663) compilebuildoutputs make some comments obsolete ([@Jarod42](https://github.com/Jarod42))\\n- [#1668](https://github.com/premake/premake-core/pull/1668) Fix v6 bootstrapping from v5 ([@starkos](https://github.com/starkos))\\n- [#1673](https://github.com/premake/premake-core/pull/1673) Updated sidebar to include toolsversion link ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1662](https://github.com/premake/premake-core/pull/1662) Handle buildcommand for Codelite ([@Jarod42](https://github.com/Jarod42))\\n- [#1658](https://github.com/premake/premake-core/pull/1658) Fix D module compiler output for visual studio ([@nickclark2016](https://github.com/nickclark2016))\\n\\nAdditional gratitude and good wishes to everyone who helped review pull requests and triage issues this cycle. Projects like this don\'t work without you.\\n\\n<div style={{textAlign: \'center\'}}>\\n\\t<a href=\\"https://opencollective.com/_fivem\\">\\n\\t\\t<img src=\\"https://images.opencollective.com/_fivem/2f78b5f/logo/128.png\\"/>\\n\\t</a>\\n</div>\\n\\nA big shout out to our premier sponsor **[Cfx.re](https://opencollective.com/_fivem)** and all [our monthly backers](https://opencollective.com/premake#section-contributors)\u2014be sure to check out their work and support them back if you can!\\n\\nI welcome questions, suggestions, and concerns. Message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at [starkos@industriousone.com](mailto:starkos@industriousone.com), or [open a discussion on GitHub](https://github.com/premake/premake-core/discussions)."},{"id":"/2021/04/20/community-update-8","metadata":{"permalink":"/blog/2021/04/20/community-update-8","source":"@site/blog/2021-04-20-community-update-8.md","title":"Community Update #8","description":"Welcome Website!","date":"2021-04-20T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":2.245,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #8","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #9","permalink":"/blog/2021/08/01/community-update-9"},"nextItem":{"title":"Community Update #7","permalink":"/blog/2021/02/24/community-update-7"}},"content":"### Welcome Website!\\n\\nThe biggest update this cycle: a new and very much improved Premake website. Built with [Docusaurus](https://docusaurus.io), the new site gives us better navigation and search, a place for news (with RSS!) and it sure looks a hell of a lot better than my \\"make a website in 20 minutes\\" version we were running before.\\n\\nMany thanks to [@KyrietS](https://github.com/KyrietS) for kicking off the process and the help with bootstrapping and content migration! \ud83d\ude4c\\n\\nOn the process side, this upgrade means that the [documentation now lives with the code](https://github.com/premake/premake-core/tree/master/website/docs). Anyone can contribute by submitting a pull request, and the docs can now be updated right alongside the code that implements the changes. I\'m optimistic this will help us improve the accuracy and timeliness of the documentation.\\n\\n_(The GitHub wiki served us well in its time, and is still there for the historical record. But people tended to not keep it up to date with the code. Navigation and search wasn\'t as nice. And permissions were all-or-nothing; there was no great way to strike a balance between community edits and preventing spam and vandalism.)_\\n\\nVery happy about this.\\n\\n### Premake v5.0-alpha16 Released\\n\\nI\u2026did not realize how long it had been since there was a proper release. Pandemic and all that. I\'ve corrected the matter: [v5.0-alpha16 is now available](https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha16), with lots of good improvements. See the full changelog [here](https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha16).\\n\\n(By the way, if anyone out there has a knack for build automation I\'d love to see these releases automated. Get in touch!)\\n\\n{/* truncate */}\\n\\n### RFC: Branch or Backport\\n\\nI also finally sat down and [opened an RFC](https://github.com/premake/premake-core/discussions/1616) to figure out what to do with the work going on over at [premake-next](https://github.com/starkos/premake-next): branch and push ahead to a v6, or backport the improvements into v5? I\'ve gone back and forth on it but came down on the side of branching; now I\'d love to hear what the community thinks. Join the discussion [here](https://github.com/premake/premake-core/discussions/1616).\\n\\n### What\'s Next for Next\\n\\nWhile we\'re discussing, I\'m hoping to get back to [premake-next](https://github.com/starkos/premake-next), finish up the first few build switches (defines, include directories, that kind of thing), and show them working for both project and file-level configurations, exported for Visual Studio.\\n\\n### Thanks \ud83d\ude4f\\n\\nAs I do but never do enough, many thanks to [@samsinsane](https://github.com/samsinsane), [@KyrietS](https://github.com/KyrietS), and [everyone who contributed code](https://github.com/premake/premake-core/pulls?q=is%3Apr+is%3Aclosed+sort%3Aupdated-desc) and helped review PRs and issues this cycle.\\n\\nMany thanks to **[CitizenFX Collective](https://opencollective.com/_fivem#section-contributions)** and **[all our monthly backers](https://opencollective.com/premake#section-contributors)** who allow me to work on Premake instead of shilling for client work. Couldn\'t be doing this without your generosity.\\n\\nAnd as ever: I welcome questions, suggestions, and concerns. Message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at starkos@industriousone.com, or [open a discussion on GitHub](https://github.com/premake/premake-core/discussions).\\n\\n~st."},{"id":"/2021/02/24/community-update-7","metadata":{"permalink":"/blog/2021/02/24/community-update-7","source":"@site/blog/2021-02-24-community-update-7.md","title":"Community Update #7","description":"A quick update this cycle so I can get right back to it: I managed to free up meaningful blocks of time for Premake in February\u2014felt good!\u2014and tackle files and removeFiles, support configuration and platform specific files, and get it all exporting to Visual Studio (\u2026and bulldoze through the rabbit holes along the way). From the user-facing side not a big change, but a hefty commit just the same. The core platform is starting to feel reasonably complete.","date":"2021-02-24T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":1.86,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #7","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #8","permalink":"/blog/2021/04/20/community-update-8"},"nextItem":{"title":"Community Update #6","permalink":"/blog/2020/11/02/community-udpate-6"}},"content":"A quick update this cycle so I can get right back to it: I managed to free up meaningful blocks of time for Premake in February\u2014felt good!\u2014and tackle **files** and **removeFiles**, support configuration and platform specific files, and get it all exporting to Visual Studio (\u2026and bulldoze through the rabbit holes along the way). From the user-facing side not a big change, but [a hefty commit](https://github.com/starkos/premake-next/commit/f5cb8678a6cc2939faceacbb8143bd9a094709f6) just the same. The core platform is starting to feel reasonably complete.\\n\\n### What\'s Next\\n\\n- For real this time, first thing: step away from the code and open an RFC on merging the projects. I\'ve never been great at that whole \\"stepping away from the code\\" thing but I\'ll do my very best.\\n- Work with [@KyrietS](https://github.com/KyrietS) to bring [a new & improved documentation system online](https://github.com/premake/premake-core/pull/1587).\\n\\nLonger term: push to get the new code to the point where it can generate its own Visual Studio project files. I\'ve actually done a good chunk of work on this, but wasn\'t quite able to bring it home this month. Then do the same with Xcode.\\n\\n{/* truncate */}\\n\\n### Meanwhile in V5\\n\\nThe community making the world a better place\u2026\\n\\n- [#1551](https://github.com/premake/premake-core/pull/1551) Add NetCore to CLR API ([@nickclark2016](https://github.com/nickclark2016))\\n- [#1554](https://github.com/premake/premake-core/pull/1554) [clang] Use `llvm-ar` linker when LTO flag is set ([@JoelLinn](https://github.com/JoelLinn))\\n- [#1552](https://github.com/premake/premake-core/pull/1552) Fix MSC LTO, runtime, subsystem ([@JoelLinn](https://github.com/JoelLinn))\\n- [#1560](https://github.com/premake/premake-core/pull/1560) Add newer shader versions ([@dpeter99](https://github.com/dpeter99))\\n- [#1562](https://github.com/premake/premake-core/pull/1562) Remove moduledownloader to avoid RCE ([@gibbed](https://github.com/gibbed))\\n- [#1564](https://github.com/premake/premake-core/pull/1564) Improve .NET version check to support net5.0+ ([@ClxS](https://github.com/ClxS))\\n- [#1565](https://github.com/premake/premake-core/pull/1565) Move AllowUnsafeBlocks to project level property ([@ClxS](https://github.com/ClxS))\\n- [#1566](https://github.com/premake/premake-core/pull/1566) Set execute bit on Bootstrap.bat ([@ratzlaff](https://github.com/ratzlaff))\\n- [#1571](https://github.com/premake/premake-core/pull/1571) Add useFullPaths for Visual Studio projects ([@cos-public](https://github.com/public))\\n- [#1576](https://github.com/premake/premake-core/pull/1576) Mesh and amplification shader type for Visual Studio ([@pkurth](https://github.com/pkurth))\\n\\n### Thanks!\\n\\nKudos and a call out to **[@samsinsane](https://github.com/samsinsane)** and the contributors listed above, **[CitizenFX Collective](https://opencollective.com/_fivem#section-contributions)** for their continued strong financial support, and to [all of our monthly backers](https://opencollective.com/premake#section-contributors)! Be sure to check out their work and support them back if you can!\\n\\nLots of big changes happening\u2014I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set to the coding style. You can message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at starkos@industriousone.com, or open an issue on [the premake-next GitHub project](https://github.com/starkos/premake-next).\\n\\n~st."},{"id":"/2020/11/02/community-udpate-6","metadata":{"permalink":"/blog/2020/11/02/community-udpate-6","source":"@site/blog/2020-11-02-community-udpate-6.md","title":"Community Update #6","description":"Enter the Exporters","date":"2020-11-02T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":4.565,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #6","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #7","permalink":"/blog/2021/02/24/community-update-7"},"nextItem":{"title":"Community Update #5","permalink":"/blog/2020/08/04/community-update-5"}},"content":"### Enter the Exporters\\n\\nThe focus for this cycle was getting an exporter\u2014I settled on Visual Studio\u2014up and running and able to generate a basic, mostly hardcoded workspace and project. More details below, but TL;DR:\\n\\n- All of the core systems are now in play, with the exception of toolsets and token expansion (more on those below)\\n- The **workspace**, **project**, **location**, and **filename** scripting APIs are implemented, as well as the ability to declare conditional configuration blocks\\n- A very rudimentary Visual Studio exporter is now in place, with the ability to generate mostly hardcoded C/C++ solutions and projects at the specified locations and filenames\\n\\n### What\'s Next for Next\\n\\nFor those of you who are more interested in \\"is it done yet?\\" than \\"what\'s new?\\", here\'s my current thinking on what comes next:\\n\\n- Decide if/how/when/where these improvements get merged (or not) with Premake5. I have some thoughts of course, and will be opening an RFC on the issue tracker shortly to gather feedback. I\'l announce it on [@premakeapp](https://twitter.com/premakeapp) when I do.\\n- Get build configurations & files online\u2014be able to generate simple Visual Studio C/C++ projects with no extra switches or dependencies\\n- Get Make and Xcode up to same level as Visual Studio\u2014going to be some rewriting here as that code has seen a lot of wear and tear, and needs to be brought up to the latest code conventions\\n- Decide on and build out the new solution for toolset adapters\u2014I\'ll open an RFC on the issue tracker for this as well\\n- Add **kind, links,** and the most important switches (e.g. **includedirs, symbols, optimize**)\u2014be able to support the most common C/C++ builds\\n\\nSomewhere in there I should also backfill the documentation so people know what\'s working. All of this is subject to change and peer pressure, feedback welcome.\\n\\n{/* truncate */}\\n\\n### What\'s New\\n\\nI\'m doing my best to keep [an inventory of the major changes here](https://github.com/starkos/premake-next/blob/master/docs/Changes-Since-v5.md); let me know if you spot anything missing (and thanks to those who have already).\\n\\n#### Scoping is now explicit\\n\\nPremake4/5\'s scoping rules have always been a big gotcha. Tough for newcomers, easy to break even for experienced users, and very difficult to debug. I\'m proposing that scoping be made explicit using function callbacks. Here\'s what a simple Hello World script might look with the new approach (apologies again for the images; if OpenCollective\'s editor supports code blocks I haven\'t been able to find them yet).\\n\\n```lua\\nworkspace(\'HelloWorld\', function ()\\n\\tconfigurations { \'Debug\', \'Release\' }\\n\\n\\tproject(\'HelloWorld\', function ()\\n\\t\\tkind \'ConsoleApplication\'\\n\\t\\tfiles { \'**.h\', \'**.cpp\' }\\n\\n\\t\\twhen({ configurations=\'Debug\' }, function ()\\n\\t\\t\\tdefines { \'DEBUG\' }\\n\\t\\t\\tsymbols \'On\'\\n\\t\\tend)\\n\\n\\t\\twhen({ configurations=\'Release\' }, function ()\\n\\t\\t\\tdefines { \'NDEBUG\' }\\n\\t\\t\\toptimize \'On\'\\n\\t\\tend)\\n\\tend)\\nend)\\n```\\n\\n_(Keep in mind, only **workspace, project, location,** and **filename** are implemented so far, the rest will be coming online ASAP. The name **when()** is a proposal, feedback welcome.)_\\n\\nUnder the hood, the provided configuration functions are called immediately. Under the hood, that workspace() helper looks like:\\n\\n```lua\\nfunction workspace(name, fn)\\n\\tworkspaces(name)\\n\\twhen({ workspaces = name }, function ()\\n\\t\\tbaseDir(_SCRIPT_DIR)\\n\\t\\tfn()\\n\\tend)\\nend)\\n```\\n\\n\u2026so things still work the same as in Premake5, but scopes are now clearly explicit, and the indentation actually makes real sense (and gets syntax-aware editor support.\\n\\nThe syntax is, unfortunately, noisy. Down the road I wouldn\'t be opposed to tweaking Premake\'s embedded Lua runtime to provide a simpler syntax.\\n\\n#### Exporters are no longer version specific\\n\\nThe command to export a project for Visual Studio now looks like this:\\n\\n```bash\\n# target the latest version of Visual Studio we support\\npremake6 vstudio\\n\\n# target a specific version\\npremake6 vstudio=2017\\n```\\n\\nAs anyone working on the Visual Studio or Xcode exporters is well aware, tool vendors are no longer waiting for the next major release to add features and change project formats. While more work is needed, the new command line syntax at least opens up the possibility of doing something like\u2026\\n\\n```bash\\npremake6 vstudio=14.0.25431.01\\n```\\n\\n\u2026which will allow us to support people who need to target a specific build of one of these tools.\\n\\n#### Container hierarchy is now more flexible\\n\\nIn Premake4+, projects were required to be declared within one and only one workspace; this is now loosened up. The earlier Hello, World example could also be written like:\\n\\n```lua\\nworkspaces { \'HelloWorld\' }\\nprojects { \'HelloWorld\' }\\n\\nwhen({ \'workspaces:HelloWorld\' }, function ()\\n\\tprojects { \'HelloWorld\' }\\nend)\\n```\\n\\nProjects can be shared between workspaces, or even be completely standalone, if the target toolset supports it.\\n\\n### What\'s next\\n\\nI covered this above, but an RFC to coordinate v5 vs. vNext development is currently next on my to-do list.\\n\\nThese are big changes and I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set, to the coding style. You can message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at **starkos@industriousone.com**, or open an issue on [the premake-next GitHub project](https://github.com/starkos/premake-next).\\n\\n### Thanks to our supporters! \ud83c\udf89\\n\\nMany thanks to my co-maintainer [@samsinsane](https://github.com/samsinsane), who has been doing a stellar job of keeping the shop running while I\'ve been distracted with the new code, and to [@nickclark2016](https://github.com/nickclark2016), [@noresources](https://github.com/noresources), [@nickgravelyn](https://github.com/nickgravelyn), [@Jarod42](https://github.com/Jarod42), and [@cos-public](https://github.com/cos-public) for helping out with issues and new pull requests\u2014very much appreciated!\\n\\nAnd another big shout out to **[CitizenFX Collective](https://opencollective.com/_fivem#section-contributions)** for their continued strong financial support\u2014as well as [all of our monthly backers](https://opencollective.com/premake#section-contributors!\\n\\nDoing my best to get this new version fully up to speed ASAP for all of you.\\n\\n~st."},{"id":"/2020/08/04/community-update-5","metadata":{"permalink":"/blog/2020/08/04/community-update-5","source":"@site/blog/2020-08-04-community-update-5.md","title":"Community Update #5","description":"The new storage system has arrived","date":"2020-08-04T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":4.97,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #5","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #6","permalink":"/blog/2020/11/02/community-udpate-6"},"nextItem":{"title":"Community Update #4","permalink":"/blog/2020/04/07/community-update-4"}},"content":"### The new storage system has arrived\\n\\nI am happy to be able to say that I\'ve wrapped up the first round of development on [the new storage & query system](https://github.com/starkos/premake-next/tree/master/core/modules/store). I threw [every edge case I could think of](https://github.com/starkos/premake-next/blob/master/core/modules/store/tests/test_query.lua) at it and was able to, eventually, pass them all.\\n\\n### What\'s new with the new system?\\n\\nLearning my lesson from past development, I did my best to make this new version as open-ended and unconstrained as possible.\\n\\n**A proper API.** The storage and query API have been cleaned up and condensed to make things easier and more powerful for module authors. (Sorry for the inline images, the OpenCollective editor won\'t allow me to author code blocks?)\\n\\n{/* truncate */}\\n\\n```lua\\n-- create a new query, targeting a particular \\"environment\\";\\n-- returns the global configuration for that environment\\nlocal global = store:query({ system=\'windows\', action=\'vs2019\' })\\n\\n-- from the global scope, get the configuration for a specific workspace\\nlocal wks = global:select({ workspaces=\'Workspace1\' })\\n\\n-- from that workspace, get the configuration for a specific project\\nlocal prj = wks:select({ projects=\'Project1\' })\\n```\\n\\n**No containers.** Unlike the v5 system, there is no hardcoded \\"container\\" hierarchy. \\"Scopes\\" are arbitrary and defined by the query author, making new or ad hoc scopes trivial to implement.\\n\\n```lua\\n-- configuration for Project1 common to all workspaces\\nlocal prj1 = global:select({ projects=\'Project1\' })\\n\\n-- all DLL configuration\\nlocal cfg = global:select({ kind=\'SharedLib\' })\\n```\\n\\n**Fine-grained inheritance.** Inheritance in v5 was baked into the system and difficult to modify or work around. The new system allows inheritance to be enabled (or not) between any \\"scopes\\", or even on a per-fetch basis.\\n\\n```lua\\n-- this project inherits values from the workspace\\nlocal prj1 = wks\\n\\t:select({ projects=\'Project1\' })\\n\\t:inheritValues()\\n\\n-- this project does not inherit workspace values\\nlocal prj2 = wks:\\n\\t:select({ projects=\'Project2\' })\\n\\n-- inheritance can then be enabled for a particular fetch\\nprj2:inheritValues().fetch(\'defines\')\\n\\n-- get all configuration specific to the Win64 debug build, without\\n-- inheriting anything from the project. This was really difficult\\n-- to do in the previous system\\nlocal files = prj2\\n\\t:select({ platforms=\'Win64\', configurations=\'Debug\' })\\n```\\n\\n**No more file configurations.** This one pleases me greatly: file-level configuration is now no different than anything else. This will make it much easier to implement per-file configuration settings going forward.\\n\\n```lua\\nlocal file = prj:select({ files=\'Hello.cpp\' })\\nlocal fileCfg = file:select({ configurations=\'Debug\' })\\nlocal fileDefines = fileCfg:fetch(\'defines\')\\n```\\n\\n**No \\"magic\\" fields.** In v5, certain fields received special processing to enable out-of-order evaluation for situations like the one shown below. This worked for most projects, but not for everyone, and it added extra processing and overhead. The new system is able to handle situations like these as a general case, with no workarounds.\\n\\n```lua\\nfilter { kind=\'SharedLib\' }  -- don\'t yet know what `kind` will be\\n\\tdefines \'DLL_EXPORT\'\\n\\nproject \'Project1\'\\n\\tkind \'SharedLib\'   -- need to go back and get that earlier define\\n```\\n\\n**Reduced configuration constraints.** It now possible to share projects between workspaces, just as you would any other configuration. Containers which previously required the use of special APIs now work like any other field. Using the v5 scripting syntax (which isn\'t implemented in the new version), that means you can do things like:\\n\\n```lua\\nworkspaces { \'Workspace1\', \'Workspace2\' }\\nprojects { \'Project1\', \'Project2\' }\\n\\nfilter { \'workspaces:Workspace*\' }\\n\\tprojects { \'Project1\' }\\n```\\n\\n### On performance\\n\\nWhen I announced that I was working on a new system, several people were quick to raise performance as a critical concern. While it is too soon for performance testing\u2014this is just the \\"keep it simple; make it work\\" version\u2014I have tried to design the overall approach for optimizability. The new system is simpler and \\"flatter\\", provides more opportunities for caching intermediate results, and should translate to C reasonably well. Once the new system has been proven fit for purpose and there are enough features in place to run a real world test I will loop back to complete those optimizations.\\n\\n### Next steps\\n\\nAll of these improvements and advances are academic until you can actually generate some output, so that\'s next on my list. In order to cut to the chase and get us to a \\"v5 vs. v6\\" decision as quickly as possible, without getting mired in all of the complexities of targeting a specific toolset, I\'m planning to build a JSON export module over the new code. (This is something I\'ve wanted in the past to assist with tooling, automation and visualization anyway.) That should allow me to quickly build out the scaffolding and APIs required by all exporters, as well as provide a good testbed for bringing the remaining features online as we move ahead. Feedback on that approach, or alternative suggestions, are welcome.\\n\\n### v5 vs. v6\\n\\nIt\'s my hope that with an exporter in place folks will have enough to see and touch to consider where things go next. Do we backport the new code to v5 and rework all of the existing actions, potentially breaking existing projects? Or do we flip the bit on v5, mark it \\"stable\\", and push ahead with a v6 instead? (I have an opinion, but keeping an open mind.) When the time comes I\'ll open an RFC issue on GitHub so everyone can have their say on the matter.\\n\\n### Feedback is welcome and appreciated!\\n\\nThese are big changes and I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set, to the coding style. You can message or DM me at [@premakeapp](https://twitter.com/premakeapp), email at **starkos@industriousone.com**, or open an issue on [the premake-next GitHub project](https://github.com/starkos/premake-next).\\n\\nAnd as we do: a shout out to **[CitizenFX Collective](https://opencollective.com/_fivem)** and **[Industrious One](https://opencollective.com/industriousone)** and **[everyone else](https://opencollective.com/premake#section-contributors)** who has helped back us so far. Getting this new system shipped crosses a big dependency off the to-do list, and I\'m not sure it ever would have seen the light of day without your help. Many and sincere thanks to all of you! \ud83d\ude4c\\n\\n~st."},{"id":"/2020/04/07/community-update-4","metadata":{"permalink":"/blog/2020/04/07/community-update-4","source":"@site/blog/2020-04-07-community-update-4.md","title":"Community Update #4","description":"It\'s been much longer than anticipated since the last community update. I was out of the country for a bit, and then shortly after my return the whole Situation hit the fan and things got crazy for a while. I\'m back now, up and running and looking ahead to what\'s next. I hope all of you are also safe and sound and getting your groove back.","date":"2020-04-07T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":2.46,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #4","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #5","permalink":"/blog/2020/08/04/community-update-5"},"nextItem":{"title":"Community Update #3","permalink":"/blog/2020/01/08/community-update-3"}},"content":"It\'s been much longer than anticipated since the last community update. I was out of the country for a bit, and then shortly after my return the whole Situation hit the fan and things got crazy for a while. I\'m back now, up and running and looking ahead to what\'s next. I hope all of you are also safe and sound and getting your groove back.\\n\\n#### Inbox Zero\\n\\nRather than diving right back into [premake-next](https://github.com/starkos/premake-next), it felt best to take a turn clearing out the lingering pull requests that have been haunting our queue, in some cases for years now. [@saminsane](https://github.com/samsinsane) has been doing a fantastic job triaging your new PRs and getting them merged; I just had to deal with the older ones which, for various reasons, couldn\'t easily be landed.\\n\\nLong story short: after several years, we\'re at [inbox zero](https://twitter.com/premakeapp/status/1250780905016303616). Check out [Premake\'s recently closed PR list](https://github.com/premake/premake-core/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc) for the details on how we got there.\\n\\nWhew!\\n\\n#### Alpha-15\\n\\nWith inbox zero reached, we also cut [a new 5.0 alpha release](https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha15) with over 50 changes and fixes, from over 20 different contributors. Nicely done everyone, and thanks! \ud83d\ude4c\\n\\n{/* truncate */}\\n\\n#### Premake5 Stable?\\n\\nSpeaking of changes and releases, [#1423](https://github.com/premake/premake-core/issues/1423) from [@dvzrz](https://github.com/dvzrv) asks whether it\'s (finally) time to cut a stable release of Premake5. Fair question! As I responded on the issue, [@saminsane](https://github.com/samsinsane) and I have discussed this before, and our general feeling is that there are too many big, breaking changes that still need to be made.\\n\\n> Gmake/Gmake2 situation needs to be sorted, the Xcode exporter needs to be made fit for use, both Gmake & Xcode need to be made module-friendly, and the toolset abstractions need to be reworked to support more real-world setups. The internal APIs really should be cleaned up and naming conventions standardized for module developers.\\n\\nHelp tackling those areas is, of course, very welcome.\\n\\nThat said\u2026\\n\\n#### Back to Next\\n\\nWith the PRs cleared and a new alpha released, I\'m now turning my attention back to [premake-next](https://github.com/starkos/premake-next). I\'m going to adjust the plan a bit and focus on getting the new storage and query systems online ASAP. Fixing these two systems is the point of whole exercise, and it seems worth getting more eyes on them sooner than later, even if the configuration blocks have to be manually assembled (i.e. the convenience functions like workspace(), project(), defines(), files(), etc. won\'t be there yet\u2026it will make sense when you see it).\\n\\n#### So long and thanks for all the fish\\n\\nAs ever, big and many thanks to everyone who contributed to alpha-15, and to everyone who continues to support [the Premake OpenCollective](https://opencollective.com/premake), with an extra special \ud83c\udf89 to new sponsors [Emilio Lopez](https://opencollective.com/emilio-lopez) and [Benjamin Schlotter](https://opencollective.com/benjamin-schlotter), and our stalwart benefactor **[CitizenFX Collective](https://opencollective.com/_fivem)**. I wouldn\'t be able to get any of this done without your help, and I truly appreciate it.\\n\\nStay safe!\\n\\n~st.\\n\\n(Your feedback is welcome and appreciated\u2014come find us at [github.com/premake](https://github.com/premake) or [@premakeapp](https://twitter.com/premakeapp).)"},{"id":"/2020/01/08/community-update-3","metadata":{"permalink":"/blog/2020/01/08/community-update-3","source":"@site/blog/2020-01-08-community-update-3.md","title":"Community Update #3","description":"Just a quick update this time: I had big plans for new features this cycle, but ended up getting swamped in end-of-year deadlines, and was only able to deliver a small portion of what I had intended (and late, at that). Still, I did manage a quick port-and-polish of the unit testing module and all of its dependencies, so I\'m well positioned to begin the new user scripting API work in earnest. I will be on the road a fair bit over the next quarter, but I\'m still optimistic that I can get enough of the new system online to give folks a sense of where things are headed.","date":"2020-01-08T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":0.94,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #3","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #4","permalink":"/blog/2020/04/07/community-update-4"},"nextItem":{"title":"Community Update #2","permalink":"/blog/2019/10/23/ community-update-2"}},"content":"Just a quick update this time: I had big plans for new features this cycle, but ended up getting swamped in end-of-year deadlines, and was only able to deliver a small portion of what I had intended (and late, at that). Still, I did manage a quick port-and-polish of the unit testing module and all of its dependencies, so I\'m well positioned to begin the new user scripting API work in earnest. I will be on the road a fair bit over the next quarter, but I\'m still optimistic that I can get enough of the new system online to give folks a sense of where things are headed.\\n\\nIf you haven\'t been following along, you can see what I\'ve been up to, and why, over at [my premake-next repository on GitHub](https://github.com/starkos/premake-next). I\'m also posting regular updates here, as well as at [@premakeapp](https://twitter.com/premakeapp).\\n\\nMany thanks to **[CitizenFX Collective](https://opencollective.com/_fivem)** and **[Industrious One](https://opencollective.com/industriousone)**, and to new contributors **[Renaud Guillard](https://opencollective.com/renaud-guillard), [Wracky](https://opencollective.com/wracky),** and **[MiCroN3000](https://opencollective.com/micha-titulaer)**. Your generous support makes this possible, and is very much appreciated! \ud83c\udf89\\n\\n~st.\\n\\n(Your feedback is welcome and appreciated\u2014come find us at [github.com/premake](https://github.com/premake) or [@premakeapp](https://twitter.com/premakeapp).)\\n\\n{/* truncate */}"},{"id":"/2019/10/23/ community-update-2","metadata":{"permalink":"/blog/2019/10/23/ community-update-2","source":"@site/blog/2019-10-23- community-update-2.md","title":"Community Update #2","description":"For this cycle (I work in eight-week cycles and fill in as much Premake work as I can), I completed a long overdue pruning of the pull request backlog. Working up from the oldest, I was able to get it down to just four, all in striking distance of merging and just needing a little follow-up (assistance welcome!). I\'ll drop a list of all the PRs that were moved at the bottom of this update. Because\u2026","date":"2019-10-23T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":1.9,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #2","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #3","permalink":"/blog/2020/01/08/community-update-3"},"nextItem":{"title":"Community Update #1","permalink":"/blog/2019/08/31/community-update-1"}},"content":"For this cycle (I work in eight-week cycles and fill in as much Premake work as I can), I completed a long overdue pruning of [the pull request backlog](https://github.com/starkos/premake-next/pulls). Working up from the oldest, I was able to get it down to just four, all in striking distance of merging and just needing a little follow-up (assistance welcome!). I\'ll drop a list of all the PRs that were moved at the bottom of this update. Because\u2026\\n\\n\u2026more importantly, while I have this opportunity to log solid blocks of time to Premake ([thank you!](https://opencollective.com/premake#section-contributors)), I\'m taking on its biggest weakness: the project configuration system, the heart of the program that stores your scripted project settings and serves them back to the exporters and actions. The shortcomings in this system are the reason why it\'s so difficult to support per-file configurations, why we struggle to express makefiles succinctly, and why we can\'t do a better job of scaling up to large numbers of platforms/architectures/toolsets/etc. Fixing this fixes many things.\\n\\nTo get this done in the most expedient way, and with the least disruption, I\u2019ve [spun up a new working space at premake-next](https://github.com/starkos/premake-next). For those interested, you can read more about what I\'m doing, why, and where it\'s all headed [over there](https://github.com/starkos/premake-next). And I\u2019ll also continue posting regular updates [here on the Collective](https://opencollective.com/premake).\\n\\nWhich brings me to the part where I give a huge THANK YOU! to our continuing sponsors **[CitizenFX Collective](https://opencollective.com/_fivem)** and [Industrious One](https://opencollective.com/industriousone). I would not be able to tackle any of this were it not for your continued support. \ud83d\ude4c\\n\\nFor the next cycle, I plan to start filling in the details of an improved configuration storage approach and, if possible, merge another [pull request or two](https://github.com/premake/premake-core/pulls).\\n\\n~st.\\n\\n{/* truncate */}\\n\\n**Completed Tasks:**\\n\\n- Boostrapped [Premake-next](https://github.com/starkos/premake-next)\\n- Closed [PR #1259](https://github.com/premake/premake-core/pull/1259) with [PR #1355](https://github.com/premake/premake-core/pull/1355)\\n- Closed [PR #1271](https://github.com/premake/premake-core/pull/1271) with [PR #1356](https://github.com/premake/premake-core/pull/1356)\\n- Closed [PR #1063](https://github.com/premake/premake-core/pull/1063) with [PR #1357](https://github.com/premake/premake-core/pull/1357)\\n- Merged new PRs [#1345](https://github.com/premake/premake-core/pull/1345), [1351](https://github.com/premake/premake-core/pull/1351), [1352](https://github.com/premake/premake-core/pull/1352), [1353](https://github.com/premake/premake-core/pull/1353), [1358](https://github.com/premake/premake-core/pull/1358)\\n- Closed [issue #38](https://github.com/premake/premake-core/issues/38) and [PR #624](https://github.com/premake/premake-core/pull/624) with [feature request #1344](https://github.com/premake/premake-core/issues/1344)\\n- Closed [issue #237](https://github.com/premake/premake-core/issues/237) and [PR #956](https://github.com/premake/premake-core/pull/956) with [feature request #1346](https://github.com/premake/premake-core/issues/1346)\\n- Closed stale PRs [#968](https://github.com/premake/premake-core/pull/968), [1003](https://github.com/premake/premake-core/pull/1003), [1054](https://github.com/premake/premake-core/pull/1054), [1112](https://github.com/premake/premake-core/pull/1112), [1119](https://github.com/premake/premake-core/pull/1119), [1196](https://github.com/premake/premake-core/pull/1196), [1252](https://github.com/premake/premake-core/pull/1252), [1301](https://github.com/premake/premake-core/pull/1301)\\n- Added new \\"Get help\\" and \\"Ask a question\\" issue templates; improved \\"Report a bug\\" and \\"Request a feature\\" templates"},{"id":"/2019/08/31/community-update-1","metadata":{"permalink":"/blog/2019/08/31/community-update-1","source":"@site/blog/2019-08-31-community-update-1.md","title":"Community Update #1","description":"Say hello to the new Premake OpenCollective!","date":"2019-08-31T00:00:00.000Z","tags":[{"inline":true,"label":"community-updates","permalink":"/blog/tags/community-updates"}],"readingTime":1.84,"hasTruncateMarker":true,"authors":[{"name":"Jess Perkins","title":"Premake Admin & Developer","url":"https://github.com/starkos","imageURL":"https://github.com/starkos.png","key":"starkos","page":null}],"frontMatter":{"title":"Community Update #1","tags":["community-updates"],"authors":"starkos"},"unlisted":false,"prevItem":{"title":"Community Update #2","permalink":"/blog/2019/10/23/ community-update-2"}},"content":"Say hello to [the new Premake OpenCollective](https://opencollective.com/premake)!\\n\\nAs I\'m sure you are all too aware, Premake development has slowed to a trickle. I\'ve been taking on more and more client work to keep the books balanced, and there simply isn\'t any useful time left over at the end of the day. A not uncommon problem!\\n\\nSo I\'m trying an experiment: can we, as a community, create a pool of funding to speed up Premake\'s development? Is there enough interest to make it happen? If so, I would be delighted to transition hours from client work back to Premake, as well as put funds toward bounties and recognizing contributions from the community.\\n\\nThe experiment is now officially underway. As long as it continues, I\'ll provide regular updates on our progress and upcoming work. This cycle, I was able to\u2026\\n\\n- Set up [this OpenCollective](https://opencollective.com/premake), enabling the Premake project to accept contributions to fund on-going development and community support ([#1314](https://github.com/premake/premake-core/pull/1314), [#1316](https://github.com/premake/premake-core/pull/1316))\\n\\n- Register [@premakeapp](https://twitter.com/premakeapp) on Twitter for announcements and group communication (and maybe a little self-promotion). Come join us! ([#1315](https://github.com/premake/premake-core/pull/1315))\\n\\n- Improve the project on-boarding experience with a new [README.md](https://github.com/premake/premake-core/blob/master/README.md) and [CONTRIBUTING.md](https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md) ([#1324](https://github.com/premake/premake-core/pull/1324), [#1325](https://github.com/premake/premake-core/pull/1325))\\n\\n- Improve the collaboration process with new issue, feature, and pull request templates ([#1326](https://github.com/premake/premake-core/pull/1326), [#1327](https://github.com/premake/premake-core/pull/1327))\\n\\n{/* truncate */}\\n\\nI\'m not charging any expenses against the collective this cycle so we can build up a balance to recognize cool or important contributions from the community. You can track our finances and transactions at any time on [our OpenCollective page](https://opencollective.com/premake).\\n\\nFor the next cycle, I\'d like to show a little maintainer love by working down (and ideally clearing) the [open pull request queue](https://github.com/premake/premake-core/pulls) and, time permitting, do a bit of grooming on the [open issue list](https://github.com/premake/premake-core/issues) as well. Longer term, I\'ve put a great deal of time and thought into fixing Premake\'s core configuration engine, which is holding back development on a number of important features. I\'ve figured out [how it should work](https://github.com/industriousone/premake-query); now I\'m puzzling over [how to get there](https://github.com/starkos/premake-next) from where we are.\\n\\nMany thanks to **[CitizenFX Collective](https://opencollective.com/_fivem](https://opencollective.com/_fivem)** and **[Industrious One](https://opencollective.com/industriousone)** for their generous support this cycle. Your contributions make this possible! \ud83c\udf89\\n\\n~st.\\n\\n_(Your feedback is welcome and appreciated\u2014come find us at [github.com/premake](https://github.com/premake) or [@premakeapp](https://twitter.com/premakeapp).)_"}]}}')}}]);