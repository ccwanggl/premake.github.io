"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7658],{68782:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=s(74848),n=s(28453);const a={},o=void 0,i={id:"group",title:"group",description:'Starts a "workspace group", a virtual folder to contain one or more projects.',source:"@site/docs/group.md",sourceDirName:".",slug:"/group",permalink:"/docs/group",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/group.md",tags:[],version:"current",lastUpdatedBy:"Rsu",lastUpdatedAt:1690122355e3,frontMatter:{},sidebar:"docs",previous:{title:"gccprefix",permalink:"/docs/gccprefix"},next:{title:"headerdir",permalink:"/docs/headerdir"}},l={},c=[{value:"Parameters",id:"parameters",level:3},{value:"Applies To",id:"applies-to",level:3},{value:"Availability",id:"availability",level:3},{value:"Examples",id:"examples",level:3}];function p(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:'Starts a "workspace group", a virtual folder to contain one or more projects.'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'group("name")\n'})}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"name"})," is the name of the virtual folder, as it should appear in the IDE. Nested groups may be created by separating the names with forward slashes."]}),"\n",(0,r.jsx)(t.h3,{id:"applies-to",children:"Applies To"}),"\n",(0,r.jsx)(t.p,{children:"Workspaces."}),"\n",(0,r.jsx)(t.h3,{id:"availability",children:"Availability"}),"\n",(0,r.jsx)(t.p,{children:"5.0 or later."}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'workspace "MyWorkspace"\n\n-- put the projects "Tests1" and "Tests2" in a virtual folder named "Tests"\n\ngroup "Tests"\n\n    project "Tests1"\n      -- Tests1 stuff goes here\n\n   project "Tests2"\n      -- Tests2 stuff goes here\n\n-- Any project defined after the call to group() will go into that group. The\n-- project can be defined in a different script though.\n\ngroup "Tests"\n\n    include "tests/tests1"\n    include "tests/tests2"\n\n-- Groups can be nested with forward slashes, like a file path.\n\ngroup "Tests/Unit"\n\n-- To "close" a group and put projects back at the root level use\n-- an empty string for the name.\n\ngroup ""\n\n   project "TestHarness"\n'})}),"\n",(0,r.jsx)(t.p,{children:"The group value is latched the first time a project is declared but it can be overriden later:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local prj = project "Tests1"\nprj.group = "NotActuallyATest"\n'})}),"\n",(0,r.jsx)(t.p,{children:"or"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'project("Tests1").group = "NotActuallyATest"\n'})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var r=s(96540);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);