"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2975],{28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>l});var s=r(96540);const t={},n=s.createContext(t);function i(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(n.Provider,{value:a},e.children)}},71479:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var s=r(74848),t=r(28453);const n={},i=void 0,l={id:"vpaths",title:"vpaths",description:'Places files into groups or "virtual paths", rather than the default behavior of mirroring the filesystem in IDE-based projects. So you could, for instance, put all header files in a group called "Headers", no matter where they appeared in the source tree.',source:"@site/docs/vpaths.md",sourceDirName:".",slug:"/vpaths",permalink:"/docs/vpaths",draft:!1,unlisted:!1,editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/vpaths.md",tags:[],version:"current",lastUpdatedBy:"KyrietS",lastUpdatedAt:1615583424e3,frontMatter:{},sidebar:"docs",previous:{title:"visibility",permalink:"/docs/visibility"},next:{title:"vsprops",permalink:"/docs/vsprops"}},o={},c=[{value:"Parameters",id:"parameters",level:3},{value:"Applies To",id:"applies-to",level:3},{value:"Availability",id:"availability",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const a={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:'Places files into groups or "virtual paths", rather than the default behavior of mirroring the filesystem in IDE-based projects. So you could, for instance, put all header files in a group called "Headers", no matter where they appeared in the source tree.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths { ["group"] = "pattern(s)" }\n'})}),"\n",(0,s.jsx)(a.p,{children:"Note that Lua tables do not maintain any ordering between key-value pairs, so there is no precedence between the supplied rules. That is, you can't write a rule that rewrites the results of an earlier rule, since there is no guarantee in which order the rules will run."}),"\n",(0,s.jsx)(a.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(a.p,{children:"A list of key/value pairs, specified with Lua's standard syntax, which map file patterns to the group in which they should appear. See the examples below for a more complete explanation."}),"\n",(0,s.jsx)(a.h3,{id:"applies-to",children:"Applies To"}),"\n",(0,s.jsxs)(a.p,{children:["Project configurations. ",(0,s.jsx)(a.a,{href:"/docs/Feature-Matrix",children:"Not all exporters currently support"})," per-configuration file lists however."]}),"\n",(0,s.jsx)(a.h3,{id:"availability",children:"Availability"}),"\n",(0,s.jsx)(a.p,{children:"Premake 4.4 or later."}),"\n",(0,s.jsx)(a.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(a.p,{children:['Place all header files into a virtual path called "Headers". Any directory information is removed, so a path such as ',(0,s.jsx)(a.code,{children:"src/lua/lua.h"})," will appear in the IDE as ",(0,s.jsx)(a.code,{children:"Headers/lua.h"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths { ["Headers"] = "**.h" }\n'})}),"\n",(0,s.jsx)(a.p,{children:"You may also specify multiple file patterns using the table syntax."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths {\n   ["Headers"] = { "**.h", "**.hxx", "**.hpp" }\n}\n'})}),"\n",(0,s.jsxs)(a.p,{children:["It is also possible to include the file's path in the virtual group. Using the same example as above, this rule will appear in the IDE as ",(0,s.jsx)(a.code,{children:"Headers/src/lua/lua.h"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths { ["Headers/*"] = "**.h" }\n'})}),"\n",(0,s.jsxs)(a.p,{children:["Any directory information explicitly provided in the pattern will be removed from the replacement. This rule will appear in the IDE as ",(0,s.jsx)(a.code,{children:"Headers/lua/lua.h"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths { ["Headers/*"] = "src/**.h" }\n'})}),"\n",(0,s.jsxs)(a.p,{children:["You can also use virtual paths to remove extra directories from the IDE. For instance, this rule will cause the previous example to appear as ",(0,s.jsx)(a.code,{children:"lua/lua.h"}),", removing the ",(0,s.jsx)(a.code,{children:"src"})," part of the path from ",(0,s.jsx)(a.em,{children:"all"})," files."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths { ["*"] = "src" }\n'})}),"\n",(0,s.jsx)(a.p,{children:"And of course, you can specify more than one rule at a time."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'vpaths {\n   ["Headers"] = "**.h",\n   ["Sources/*"] = {"**.c", "**.cpp"},\n   ["Docs"] = "**.txt"\n}\n'})})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);