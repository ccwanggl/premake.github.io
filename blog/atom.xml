<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://premake.github.io/blog</id>
    <title>Premake Blog</title>
    <updated>2021-11-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://premake.github.io/blog"/>
    <subtitle>Premake Blog</subtitle>
    <icon>https://premake.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Community Update #10]]></title>
        <id>Community Update #10</id>
        <link href="https://premake.github.io/blog/2021/11/21/community-update-10"/>
        <updated>2021-11-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Premake 5.0-beta1! 🥳]]></summary>
        <content type="html"><![CDATA[<h3>Premake 5.0-beta1! 🥳</h3><p>After one of the world&#x27;s longest alpha cycles, Premake5 has finally entered beta! I don&#x27;t know about you, but I definitely had a drink to celebrate. Might have been two, even. Probably.</p><p>As <a href="/blog/2021/08/01/community-update-9#the-path-to-50">previously discussed</a>, we&#x27;ve started the process of stabilizing 5.0 and shifting breaking changes over to the new v6.x branch. We&#x27;ve <a href="https://github.com/premake/premake-core/milestone/3">set up a milestone to track our progress</a> toward a stable 5.0 release, and this is the first step in working it down.</p><p>Most of the changes in the queue are under-the-hood: release automation, bootstrapping, and unit test fixes. The only potentially significant breaking change remaining is <a href="https://github.com/premake/premake-core/issues/1099">promoting the <code>gmake2</code> exporter</a>, which I will be prioritizing for the next beta. If you happen to still be using the older <code>gmake</code> exporter, please give <code>gmake2</code> a try and let us know if you encounter issues! Most fixes have been going to <code>gmake2</code> lately, so we expect your experience will be a good one.</p><h3>Premake6</h3><p>As of this morning, Premake6 is now &quot;self-hosting&quot; on Visual Studio, Make, and Xcode, meaning that it can generate its own project files, which can then be used to build Premake6. This is a big milestone, since we can now move past isolated unit tests and actually verify our changes with working builds on all three toolsets. All of Premake&#x27;s core functionality is now fully online, and we&#x27;re shifting our focus to prioritizing and porting individual features. Still lots of hardcoded settings and to-dos, but full speed ahead!</p><p><em>(Speaking of which: I know the pace is slow<!-- -->—<!-- -->definitely slower than I would like<!-- -->—<!-- -->but thanks to <a href="#our-sponsors">our backers</a> it’s steady progress. For a bunch of nights-and-weekends part-timers we’re doing alright.)</em></p><p>I&#x27;m currently taking a bug fix &amp; cleanup pass over what we have so far, and filling in gaps in the documentation to make sure we&#x27;re not leaving too much debt behind. High priority next steps include rethinking how we abstract toolsets like GCC &amp; Clang, so we can push ahead implementing new features on top of those abstractions. And then implementing links and (...drum roll...) <em><a href="https://github.com/premake/premake-core/issues/1346">usages</a></em> (yes, really!) so we can start linking projects and their dependencies together.</p><p>Hat tip to <a href="https://github.com/nickclark2016">@nickclark2016</a> for tackling the new makefile exporter!</p><h3>Community Contributions</h3><p>Yay open source development! 🎉 Big shout out to everyone who took the time to contribute this cycle.</p><ul><li><a href="https://github.com/premake/premake-core/pull/1629">#1629</a> Add support for macOS universal binary (<a href="https://github.com/sukiyaki">@tempura-sukiyaki</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1661">#1661</a> Add <code>frameworkdirs</code> support to gmake &amp; gmake2 with gcc/clang toolsets (<a href="https://github.com/depinxi">@depinxi</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1672">#1672</a> C# Symbol Premake → VS Mapping Changes (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1680">#1680</a> Fix some build issues with mingw (<a href="https://github.com/Biswa96">@Biswa96</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1687">#1687</a> Update deprecated entry for newaction (<a href="https://github.com/Jarod42">@Jarod42</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1704">#1704</a> VS2022 Exporter (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1710">#1710</a> Add support for SSE 4.2 (<a href="https://github.com/ActuallyaDeviloper">@ActuallyaDeviloper</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1712">#1712</a> Add OpenMP support for Visual Studio (<a href="https://github.com/rvw">@T-rvw</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1713">#1713</a> Upgrade docusaurus version to beta.6 (<a href="https://github.com/KyrietS">@KyrietS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1715">#1715</a> Docs maintenance (<a href="https://github.com/KyrietS">@KyrietS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1718">#1718</a> Deprecate <code>configuration()</code> (<a href="https://github.com/starkos">@starkos</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1720">#1720</a> Improve <code>justmycode</code> (<a href="https://github.com/rvw">@T-rvw</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1721">#1721</a> Add custom rules for Gmake2 &amp; Codelite (<a href="https://github.com/Jarod42">@Jarod42</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1723">#1723</a> Add configuration condition to VS csproj references ItemGroup (<a href="https://github.com/cicanci">@cicanci</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1726">#1726</a> Updated cdialect and cppdialect docs (<a href="https://github.com/LORgames">@LORgames</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1727">#1727</a> Updated architecture docs (<a href="https://github.com/LORgames">@LORgames</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1728">#1728</a> Add action to check for and generate missing documentation (<a href="https://github.com/LORgames">@LORgames</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1730">#1730</a> Added missing <code>compileas</code> values to docs (<a href="https://github.com/LORgames">@LORgames</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1734">#1734</a> Add VS 2022 bootstrapping support (<a href="https://github.com/afxw">@afxw</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1736">#1736</a> Update showcase to include Orx (<a href="https://github.com/sausagejohnson">@sausagejohnson</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1737">#1737</a> Change Visual Studio Version to 17 so sln is opened with VS2022 (<a href="https://github.com/simco50">@simco50</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1739">#1739</a> Fix #1628 failing macOS os.findlib() test (<a href="https://github.com/starkos">@starkos</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1744">#1744</a> Add check for missing values in documentation (<a href="https://github.com/LORgames">@LORgames</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1745">#1745</a> Adding documentation for module options (<a href="https://github.com/harnisch">@hannes-harnisch</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1749">#1749</a> Changed C++20 to emit C++20 instead of C++Latest in MSVC (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1752">#1752</a> Added C17/GNU17 support to gmake/gmake2 exporters (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1753">#1753</a> Update documentation link in README (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li></ul><p>Extra thanks to the unsung heroes not mentioned here who helped review pull requests, triage issues, and generally keep the machine humming.</p><h3>Our Sponsors</h3><div style="text-align:center"><a href="https://opencollective.com/_fivem"><img src="https://images.opencollective.com/_fivem/2f78b5f/logo/128.png"/></a></div><p>Which brings us at last to our regular <em>thank you</em> &amp; shout out to our premier sponsor <strong><a href="https://opencollective.com/_fivem">Cfx.re</a></strong> as well as all <a href="https://opencollective.com/premake#section-contributors">our monthly backers</a>—be sure to check out their work and support them back if you can!</p><p>I welcome questions, suggestions, and concerns. Message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a>, or <a href="https://github.com/premake/premake-core/discussions">open a discussion on GitHub</a>.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #9]]></title>
        <id>Community Update #9</id>
        <link href="https://premake.github.io/blog/2021/08/01/community-update-9"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I can't believe we're already eight months into 2021, how did this happen.]]></summary>
        <content type="html"><![CDATA[<p>I can&#x27;t believe we&#x27;re already eight months into 2021, how did this happen.</p><h3>Branch, don&#x27;t backport</h3><p>In the last update, I asked for input on where the work going into <a href="https://github.com/starkos/premake-next">premake-next</a> should end up: branch a new 6.x major version, or backport the changes to 5.x? There was <a href="https://github.com/premake/premake-core/discussions/1616">solid consensus</a> that premake-next should be treated as a new major version, with v5 upgraded to a stable release for on-going support. Thanks to everyone who participated and offered feedback!</p><p>With that settled, I&#x27;ve archived the premake-next repository and moved all development to <a href="https://github.com/premake/premake-core/tree/6.x">a new 6.x branch on premake-core</a>. As of the next release, I&#x27;ll be upgrading the status of 5.0 from alpha to beta, with the intention of making the first stable release shortly.</p><h3>The Path to 5.0</h3><p>Premake&#x27;s perpetual alpha status <a href="https://github.com/premake/premake-core/issues/1536">causes confusion</a> and makes it <a href="https://github.com/premake/premake-core/issues/1423">difficult for some people to adopt</a>. We&#x27;ve been hanging on to that label in the hope we&#x27;d get a chance to overhaul the makefile and Xcode exporters. But now that we have a v6 branch it makes sense break things over there instead, and get v5 to a stable release sooner rather than later.</p><p>I&#x27;ve <a href="https://github.com/premake/premake-core/milestone/3">opened a 5.0 milestone</a> on the project and will be assigning a few issues to myself there. If you have a backward-compatibility breaking change that you feel must get in before 5.0 becomes stable, open or escalate an issue ASAP so we can get it on the roadmap. And as ever, we&#x27;re all really busy, so any help getting this over the finish line is much appreciated!</p><h3>Premake6</h3><p>In other news, Premake6 can now generate its own Visual Studio project files and bootstrap itself. That doesn&#x27;t sound very impressive, but it does means that all of the under the hood stuff is now online and working as intended, and a full vertical slice has been completed. 🎉</p><p><a href="https://github.com/nickclark2016">@nickclark2016</a> has volunteered to begin looking into a new-and-improved makefile exporter, which frees me up to start looking at Xcode and improving the way we represent toolsets like Clang and GCC. The stable release of 5.0 is likely to take up all the air in the room for a bit, but hopefully I can report progress on those soon.</p><h3>Community Contributions</h3><p>The community keeps things rolling—many thanks to everyone listed here!</p><ul><li><a href="https://github.com/premake/premake-core/pull/1570">#1570</a> Initial C++20 module support for Visual Studio (<a href="https://github.com/hannes-harnisch">@hannes-harnisch</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1625">#1625</a> Remove &quot;*ng&quot; action deprecation and auto-fix (<a href="https://github.com/noresources">@noresources</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1635">#1635</a> Fix typo in Using Premake documentation (<a href="https://github.com/abhiss">@abhiss</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1638">#1638</a> Fix broken links in docs (<a href="https://github.com/KyrietS">@KyrietS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1642">#1642</a> Fix spelling mistake (<a href="https://github.com/Troplo">@Troplo</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1644">#1644</a> Fix author name and update time on pages (<a href="https://github.com/KyrietS">@KyrietS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1645">#1645</a> Add missing support for prebuildmessage/postbuildmessage for Codelite (<a href="https://github.com/Jarod42">@Jarod42</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1649">#1649</a> Fix curl header search path (<a href="https://github.com/depinxi">@depinxi</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1654">#1654</a> xcode4: Fix missing link of sibling project with custom targetextension (<a href="https://github.com/depinxi">@depinxi</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1655">#1655</a> Compiler Version support for Visual Studion 2017+ (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1657">#1657</a> Renormalize line endings (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1663">#1663</a> compilebuildoutputs make some comments obsolete (<a href="https://github.com/Jarod42">@Jarod42</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1668">#1668</a> Fix v6 bootstrapping from v5 (<a href="https://github.com/starkos">@starkos</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1673">#1673</a> Updated sidebar to include toolsversion link (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1662">#1662</a> Handle buildcommand for Codelite (<a href="https://github.com/Jarod42">@Jarod42</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1658">#1658</a> Fix D module compiler output for visual studio (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li></ul><p>Additional gratitude and good wishes to everyone who helped review pull requests and triage issues this cycle. Projects like this don&#x27;t work without you.</p><div style="text-align:center"><a href="https://opencollective.com/_fivem"><img src="https://images.opencollective.com/_fivem/2f78b5f/logo/128.png"/></a></div><p>A big shout out to our premier sponsor <strong><a href="https://opencollective.com/_fivem">Cfx.re</a></strong> and all <a href="https://opencollective.com/premake#section-contributors">our monthly backers</a>—be sure to check out their work and support them back if you can!</p><p>I welcome questions, suggestions, and concerns. Message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a>, or <a href="https://github.com/premake/premake-core/discussions">open a discussion on GitHub</a>.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #8]]></title>
        <id>Community Update #8</id>
        <link href="https://premake.github.io/blog/2021/04/20/community-update-8"/>
        <updated>2021-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome Website!]]></summary>
        <content type="html"><![CDATA[<h3>Welcome Website!</h3><p>The biggest update this cycle: a new and very much improved Premake website. Built with <a href="https://docusaurus.io">Docusaurus</a>, the new site gives us better navigation and search, a place for news (with RSS!) and it sure looks a hell of a lot better than my &quot;make a website in 20 minutes&quot; version we were running before.</p><p>Many thanks to <a href="https://github.com/KyrietS">@KyrietS</a> for kicking off the process and the help with bootstrapping and content migration! 🙌</p><p>On the process side, this upgrade means that the <a href="https://github.com/premake/premake-core/tree/master/website/docs">documentation now lives with the code</a>. Anyone can contribute by submitting a pull request, and the docs can now be updated right alongside the code that implements the changes. I&#x27;m optimistic this will help us improve the accuracy and timeliness of the documentation.</p><p><em>(The GitHub wiki served us well in its time, and is still there for the historical record. But people tended to not keep it up to date with the code. Navigation and search wasn&#x27;t as nice. And permissions were all-or-nothing; there was no great way to strike a balance between community edits and preventing spam and vandalism.)</em></p><p>Very happy about this.</p><h3>Premake v5.0-alpha16 Released</h3><p>I…did not realize how long it had been since there was a proper release. Pandemic and all that. I&#x27;ve corrected the matter: <a href="https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha16">v5.0-alpha16 is now available</a>, with lots of good improvements. See the full changelog <a href="https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha16">here</a>.</p><p>(By the way, if anyone out there has a knack for build automation I&#x27;d love to see these releases automated. Get in touch!)</p><h3>RFC: Branch or Backport</h3><p>I also finally sat down and <a href="https://github.com/premake/premake-core/discussions/1616">opened an RFC</a> to figure out what to do with the work going on over at <a href="https://github.com/starkos/premake-next">premake-next</a>: branch and push ahead to a v6, or backport the improvements into v5? I&#x27;ve gone back and forth on it but came down on the side of branching; now I&#x27;d love to hear what the community thinks. Join the discussion <a href="https://github.com/premake/premake-core/discussions/1616">here</a>.</p><h3>What&#x27;s Next for Next</h3><p>While we&#x27;re discussing, I&#x27;m hoping to get back to <a href="https://github.com/starkos/premake-next">premake-next</a>, finish up the first few build switches (defines, include directories, that kind of thing), and show them working for both project and file-level configurations, exported for Visual Studio.</p><h3>Thanks 🙏</h3><p>As I do but never do enough, many thanks to <a href="https://github.com/samsinsane">@samsinsane</a>, <a href="https://github.com/KyrietS">@KyrietS</a>, and <a href="https://github.com/premake/premake-core/pulls?q=is%3Apr+is%3Aclosed+sort%3Aupdated-desc">everyone who contributed code</a> and helped review PRs and issues this cycle.</p><p>Many thanks to <strong><a href="https://opencollective.com/_fivem#section-contributions">CitizenFX Collective</a></strong> and <strong><a href="https://opencollective.com/premake#section-contributors">all our monthly backers</a></strong> who allow me to work on Premake instead of shilling for client work. Couldn&#x27;t be doing this without your generosity.</p><p>And as ever: I welcome questions, suggestions, and concerns. Message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a>, or <a href="https://github.com/premake/premake-core/discussions">open a discussion on GitHub</a>.</p><p>~st.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #7]]></title>
        <id>Community Update #7</id>
        <link href="https://premake.github.io/blog/2021/02/24/community-update-7"/>
        <updated>2021-02-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A quick update this cycle so I can get right back to it: I managed to free up meaningful blocks of time for Premake in February—felt good!—and tackle files and removeFiles, support configuration and platform specific files, and get it all exporting to Visual Studio (…and bulldoze through the rabbit holes along the way). From the user-facing side not a big change, but a hefty commit just the same. The core platform is starting to feel reasonably complete.]]></summary>
        <content type="html"><![CDATA[<p>A quick update this cycle so I can get right back to it: I managed to free up meaningful blocks of time for Premake in February—felt good!—and tackle <strong>files</strong> and <strong>removeFiles</strong>, support configuration and platform specific files, and get it all exporting to Visual Studio (…and bulldoze through the rabbit holes along the way). From the user-facing side not a big change, but <a href="https://github.com/starkos/premake-next/commit/f5cb8678a6cc2939faceacbb8143bd9a094709f6">a hefty commit</a> just the same. The core platform is starting to feel reasonably complete.</p><h3>What&#x27;s Next</h3><ul><li>For real this time, first thing: step away from the code and open an RFC on merging the projects. I&#x27;ve never been great at that whole &quot;stepping away from the code&quot; thing but I&#x27;ll do my very best.</li><li>Work with <a href="https://github.com/KyrietS">@KyrietS</a> to bring <a href="https://github.com/premake/premake-core/pull/1587">a new &amp; improved documentation system online</a>.</li></ul><p>Longer term: push to get the new code to the point where it can generate its own Visual Studio project files. I&#x27;ve actually done a good chunk of work on this, but wasn&#x27;t quite able to bring it home this month. Then do the same with Xcode.</p><h3>Meanwhile in V5</h3><p>The community making the world a better place…</p><ul><li><a href="https://github.com/premake/premake-core/pull/1551">#1551</a> Add NetCore to CLR API (<a href="https://github.com/nickclark2016">@nickclark2016</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1554">#1554</a> <!-- -->[clang]<!-- --> Use <code>llvm-ar</code> linker when LTO flag is set (<a href="https://github.com/JoelLinn">@JoelLinn</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1552">#1552</a> Fix MSC LTO, runtime, subsystem (<a href="https://github.com/JoelLinn">@JoelLinn</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1560">#1560</a> Add newer shader versions (<a href="https://github.com/dpeter99">@dpeter99</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1562">#1562</a> Remove moduledownloader to avoid RCE (<a href="https://github.com/gibbed">@gibbed</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1564">#1564</a> Improve .NET version check to support net5.0+ (<a href="https://github.com/ClxS">@ClxS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1565">#1565</a> Move AllowUnsafeBlocks to project level property (<a href="https://github.com/ClxS">@ClxS</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1566">#1566</a> Set execute bit on Bootstrap.bat (<a href="https://github.com/ratzlaff">@ratzlaff</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1571">#1571</a> Add useFullPaths for Visual Studio projects (<a href="https://github.com/public">@cos-public</a>)</li><li><a href="https://github.com/premake/premake-core/pull/1576">#1576</a> Mesh and amplification shader type for Visual Studio (<a href="https://github.com/pkurth">@pkurth</a>)</li></ul><h3>Thanks!</h3><p>Kudos and a call out to <strong><a href="https://github.com/samsinsane">@samsinsane</a></strong> and the contributors listed above, <strong><a href="https://opencollective.com/_fivem#section-contributions">CitizenFX Collective</a></strong> for their continued strong financial support, and to <a href="https://opencollective.com/premake#section-contributors">all of our monthly backers</a>! Be sure to check out their work and support them back if you can!</p><p>Lots of big changes happening—I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set to the coding style. You can message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a>, or open an issue on <a href="https://github.com/starkos/premake-next">the premake-next GitHub project</a>.</p><p>~st.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #6]]></title>
        <id>Community Update #6</id>
        <link href="https://premake.github.io/blog/2020/11/02/community-udpate-6"/>
        <updated>2020-11-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Enter the Exporters]]></summary>
        <content type="html"><![CDATA[<h3>Enter the Exporters</h3><p>The focus for this cycle was getting an exporter—I settled on Visual Studio—up and running and able to generate a basic, mostly hardcoded workspace and project. More details below, but TL;DR:</p><ul><li>All of the core systems are now in play, with the exception of toolsets and token expansion (more on those below)</li><li>The <strong>workspace</strong>, <strong>project</strong>, <strong>location</strong>, and <strong>filename</strong> scripting APIs are implemented, as well as the ability to declare conditional configuration blocks</li><li>A very rudimentary Visual Studio exporter is now in place, with the ability to generate mostly hardcoded C/C++ solutions and projects at the specified locations and filenames</li></ul><h3>What&#x27;s Next for Next</h3><p>For those of you who are more interested in &quot;is it done yet?&quot; than &quot;what&#x27;s new?&quot;, here&#x27;s my current thinking on what comes next:</p><ul><li>Decide if/how/when/where these improvements get merged (or not) with Premake5. I have some thoughts of course, and will be opening an RFC on the issue tracker shortly to gather feedback. I&#x27;l announce it on <a href="https://twitter.com/premakeapp">@premakeapp</a> when I do.</li><li>Get build configurations &amp; files online—be able to generate simple Visual Studio C/C++ projects with no extra switches or dependencies</li><li>Get Make and Xcode up to same level as Visual Studio—going to be some rewriting here as that code has seen a lot of wear and tear, and needs to be brought up to the latest code conventions</li><li>Decide on and build out the new solution for toolset adapters—I&#x27;ll open an RFC on the issue tracker for this as well</li><li>Add <strong>kind, links,</strong> and the most important switches (e.g. <strong>includedirs, symbols, optimize</strong>)—be able to support the most common C/C++ builds</li></ul><p>Somewhere in there I should also backfill the documentation so people know what&#x27;s working. All of this is subject to change and peer pressure, feedback welcome.</p><h3>What&#x27;s New</h3><p>I&#x27;m doing my best to keep <a href="https://github.com/starkos/premake-next/blob/master/docs/Changes-Since-v5.md">an inventory of the major changes here</a>; let me know if you spot anything missing (and thanks to those who have already).</p><h4>Scoping is now explicit</h4><p>Premake4/5&#x27;s scoping rules have always been a big gotcha. Tough for newcomers, easy to break even for experienced users, and very difficult to debug. I&#x27;m proposing that scoping be made explicit using function callbacks. Here&#x27;s what a simple Hello World script might look with the new approach (apologies again for the images; if OpenCollective&#x27;s editor supports code blocks I haven&#x27;t been able to find them yet).</p><pre><code class="language-lua">workspace(&#x27;HelloWorld&#x27;, function ()
    configurations { &#x27;Debug&#x27;, &#x27;Release&#x27; }

    project(&#x27;HelloWorld&#x27;, function ()
        kind &#x27;ConsoleApplication&#x27;
        files { &#x27;**.h&#x27;, &#x27;**.cpp&#x27; }

        when({ configurations=&#x27;Debug&#x27; }, function ()
            defines { &#x27;DEBUG&#x27; }
            symbols &#x27;On&#x27;
        end)

        when({ configurations=&#x27;Release&#x27; }, function ()
            defines { &#x27;NDEBUG&#x27; }
            optimize &#x27;On&#x27;
        end)
    end)
end)
</code></pre><p><em>(Keep in mind, only <strong>workspace, project, location,</strong> and <strong>filename</strong> are implemented so far, the rest will be coming online ASAP. The name <strong>when()</strong> is a proposal, feedback welcome.)</em></p><p>Under the hood, the provided configuration functions are called immediately. Under the hood, that workspace() helper looks like:</p><pre><code class="language-lua">function workspace(name, fn)
    workspaces(name)
    when({ workspaces = name }, function ()
        baseDir(_SCRIPT_DIR)
        fn()
    end)
end)
</code></pre><p>…so things still work the same as in Premake5, but scopes are now clearly explicit, and the indentation actually makes real sense (and gets syntax-aware editor support.</p><p>The syntax is, unfortunately, noisy. Down the road I wouldn&#x27;t be opposed to tweaking Premake&#x27;s embedded Lua runtime to provide a simpler syntax.</p><h4>Exporters are no longer version specific</h4><p>The command to export a project for Visual Studio now looks like this:</p><pre><code class="language-bash"># target the latest version of Visual Studio we support
premake6 vstudio

# target a specific version
premake6 vstudio=2017
</code></pre><p>As anyone working on the Visual Studio or Xcode exporters is well aware, tool vendors are no longer waiting for the next major release to add features and change project formats. While more work is needed, the new command line syntax at least opens up the possibility of doing something like…</p><pre><code class="language-bash">premake6 vstudio=14.0.25431.01
</code></pre><p>…which will allow us to support people who need to target a specific build of one of these tools.</p><h4>Container hierarchy is now more flexible</h4><p>In Premake4+, projects were required to be declared within one and only one workspace; this is now loosened up. The earlier Hello, World example could also be written like:</p><pre><code class="language-lua">workspaces { &#x27;HelloWorld&#x27; }
projects { &#x27;HelloWorld&#x27; }

when({ &#x27;workspaces:HelloWorld&#x27; }, function ()
    projects { &#x27;HelloWorld&#x27; }
end)
</code></pre><p>Projects can be shared between workspaces, or even be completely standalone, if the target toolset supports it.</p><h3>What&#x27;s next</h3><p>I covered this above, but an RFC to coordinate v5 vs. vNext development is currently next on my to-do list.</p><p>These are big changes and I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set, to the coding style. You can message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <strong><a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a></strong>, or open an issue on <a href="https://github.com/starkos/premake-next">the premake-next GitHub project</a>.</p><h3>Thanks to our supporters! 🎉</h3><p>Many thanks to my co-maintainer <a href="https://github.com/samsinsane">@samsinsane</a>, who has been doing a stellar job of keeping the shop running while I&#x27;ve been distracted with the new code, and to <a href="https://github.com/nickclark2016">@nickclark2016</a>, <a href="https://github.com/noresources">@noresources</a>, <a href="https://github.com/nickgravelyn">@nickgravelyn</a>, <a href="https://github.com/Jarod42">@Jarod42</a>, and <a href="https://github.com/cos-public">@cos-public</a> for helping out with issues and new pull requests—very much appreciated!</p><p>And another big shout out to <strong><a href="https://opencollective.com/_fivem#section-contributions">CitizenFX Collective</a></strong> for their continued strong financial support—as well as <!-- -->[all of our monthly backers]<!-- -->(<a href="https://opencollective.com/premake#section-contributors">https://opencollective.com/premake#section-contributors</a>!</p><p>Doing my best to get this new version fully up to speed ASAP for all of you.</p><p>~st.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #5]]></title>
        <id>Community Update #5</id>
        <link href="https://premake.github.io/blog/2020/08/04/community-update-5"/>
        <updated>2020-08-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The new storage system has arrived]]></summary>
        <content type="html"><![CDATA[<h3>The new storage system has arrived</h3><p>I am happy to be able to say that I&#x27;ve wrapped up the first round of development on <a href="https://github.com/starkos/premake-next/tree/master/core/modules/store">the new storage &amp; query system</a>. I threw <a href="https://github.com/starkos/premake-next/blob/master/core/modules/store/tests/test_query.lua">every edge case I could think of</a> at it and was able to, eventually, pass them all.</p><h3>What&#x27;s new with the new system?</h3><p>Learning my lesson from past development, I did my best to make this new version as open-ended and unconstrained as possible.</p><p><strong>A proper API.</strong> The storage and query API have been cleaned up and condensed to make things easier and more powerful for module authors. (Sorry for the inline images, the OpenCollective editor won&#x27;t allow me to author code blocks?)</p><pre><code class="language-lua">-- create a new query, targeting a particular &quot;environment&quot;;
-- returns the global configuration for that environment
local global = store:query({ system=&#x27;windows&#x27;, action=&#x27;vs2019&#x27; })

-- from the global scope, get the configuration for a specific workspace
local wks = global:select({ workspaces=&#x27;Workspace1&#x27; })

-- from that workspace, get the configuration for a specific project
local prj = wks:select({ projects=&#x27;Project1&#x27; })
</code></pre><p><strong>No containers.</strong> Unlike the v5 system, there is no hardcoded &quot;container&quot; hierarchy. &quot;Scopes&quot; are arbitrary and defined by the query author, making new or ad hoc scopes trivial to implement.</p><pre><code class="language-lua">-- configuration for Project1 common to all workspaces
local prj1 = global:select({ projects=&#x27;Project1&#x27; })

-- all DLL configuration
local cfg = global:select({ kind=&#x27;SharedLib&#x27; })
</code></pre><p><strong>Fine-grained inheritance.</strong> Inheritance in v5 was baked into the system and difficult to modify or work around. The new system allows inheritance to be enabled (or not) between any &quot;scopes&quot;, or even on a per-fetch basis.</p><pre><code class="language-lua">-- this project inherits values from the workspace
local prj1 = wks
    :select({ projects=&#x27;Project1&#x27; })
    :inheritValues()

-- this project does not inherit workspace values
local prj2 = wks:
    :select({ projects=&#x27;Project2&#x27; })

-- inheritance can then be enabled for a particular fetch
prj2:inheritValues().fetch(&#x27;defines&#x27;)

-- get all configuration specific to the Win64 debug build, without
-- inheriting anything from the project. This was really difficult
-- to do in the previous system
local files = prj2
    :select({ platforms=&#x27;Win64&#x27;, configurations=&#x27;Debug&#x27; })
</code></pre><p><strong>No more file configurations.</strong> This one pleases me greatly: file-level configuration is now no different than anything else. This will make it much easier to implement per-file configuration settings going forward.</p><pre><code class="language-lua">local file = prj:select({ files=&#x27;Hello.cpp&#x27; })
local fileCfg = file:select({ configurations=&#x27;Debug&#x27; })
local fileDefines = fileCfg:fetch(&#x27;defines&#x27;)
</code></pre><p><strong>No &quot;magic&quot; fields.</strong> In v5, certain fields received special processing to enable out-of-order evaluation for situations like the one shown below. This worked for most projects, but not for everyone, and it added extra processing and overhead. The new system is able to handle situations like these as a general case, with no workarounds.</p><pre><code class="language-lua">filter { kind=&#x27;SharedLib&#x27; }  -- don&#x27;t yet know what `kind` will be
    defines &#x27;DLL_EXPORT&#x27;

project &#x27;Project1&#x27;
    kind &#x27;SharedLib&#x27;   -- need to go back and get that earlier define
</code></pre><p><strong>Reduced configuration constraints.</strong> It now possible to share projects between workspaces, just as you would any other configuration. Containers which previously required the use of special APIs now work like any other field. Using the v5 scripting syntax (which isn&#x27;t implemented in the new version), that means you can do things like:</p><pre><code class="language-lua">workspaces { &#x27;Workspace1&#x27;, &#x27;Workspace2&#x27; }
projects { &#x27;Project1&#x27;, &#x27;Project2&#x27; }

filter { &#x27;workspaces:Workspace*&#x27; }
    projects { &#x27;Project1&#x27; }
</code></pre><h3>On performance</h3><p>When I announced that I was working on a new system, several people were quick to raise performance as a critical concern. While it is too soon for performance testing—this is just the &quot;keep it simple; make it work&quot; version—I have tried to design the overall approach for optimizability. The new system is simpler and &quot;flatter&quot;, provides more opportunities for caching intermediate results, and should translate to C reasonably well. Once the new system has been proven fit for purpose and there are enough features in place to run a real world test I will loop back to complete those optimizations.</p><h3>Next steps</h3><p>All of these improvements and advances are academic until you can actually generate some output, so that&#x27;s next on my list. In order to cut to the chase and get us to a &quot;v5 vs. v6&quot; decision as quickly as possible, without getting mired in all of the complexities of targeting a specific toolset, I&#x27;m planning to build a JSON export module over the new code. (This is something I&#x27;ve wanted in the past to assist with tooling, automation and visualization anyway.) That should allow me to quickly build out the scaffolding and APIs required by all exporters, as well as provide a good testbed for bringing the remaining features online as we move ahead. Feedback on that approach, or alternative suggestions, are welcome.</p><h3>v5 vs. v6</h3><p>It&#x27;s my hope that with an exporter in place folks will have enough to see and touch to consider where things go next. Do we backport the new code to v5 and rework all of the existing actions, potentially breaking existing projects? Or do we flip the bit on v5, mark it &quot;stable&quot;, and push ahead with a v6 instead? (I have an opinion, but keeping an open mind.) When the time comes I&#x27;ll open an RFC issue on GitHub so everyone can have their say on the matter.</p><h3>Feedback is welcome and appreciated!</h3><p>These are big changes and I welcome questions, suggestions, and concerns. Everything is up for discussion, from the feature set, to the coding style. You can message or DM me at <a href="https://twitter.com/premakeapp">@premakeapp</a>, email at <strong><a href="mailto:starkos@industriousone.com">starkos@industriousone.com</a></strong>, or open an issue on <a href="https://github.com/starkos/premake-next">the premake-next GitHub project</a>.</p><p>And as we do: a shout out to <strong><a href="https://opencollective.com/_fivem">CitizenFX Collective</a></strong> and <strong><a href="https://opencollective.com/industriousone">Industrious One</a></strong> and <strong><a href="https://opencollective.com/premake#section-contributors">everyone else</a></strong> who has helped back us so far. Getting this new system shipped crosses a big dependency off the to-do list, and I&#x27;m not sure it ever would have seen the light of day without your help. Many and sincere thanks to all of you! 🙌</p><p>~st.</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #4]]></title>
        <id>Community Update #4</id>
        <link href="https://premake.github.io/blog/2020/04/07/community-update-4"/>
        <updated>2020-04-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It's been much longer than anticipated since the last community update. I was out of the country for a bit, and then shortly after my return the whole Situation hit the fan and things got crazy for a while. I'm back now, up and running and looking ahead to what's next. I hope all of you are also safe and sound and getting your groove back.]]></summary>
        <content type="html"><![CDATA[<p>It&#x27;s been much longer than anticipated since the last community update. I was out of the country for a bit, and then shortly after my return the whole Situation hit the fan and things got crazy for a while. I&#x27;m back now, up and running and looking ahead to what&#x27;s next. I hope all of you are also safe and sound and getting your groove back.</p><h4>Inbox Zero</h4><p>Rather than diving right back into <a href="https://github.com/starkos/premake-next">premake-next</a>, it felt best to take a turn clearing out the lingering pull requests that have been haunting our queue, in some cases for years now. <a href="https://github.com/samsinsane">@saminsane</a> has been doing a fantastic job triaging your new PRs and getting them merged; I just had to deal with the older ones which, for various reasons, couldn&#x27;t easily be landed.</p><p>Long story short: after several years, we&#x27;re at <a href="https://twitter.com/premakeapp/status/1250780905016303616">inbox zero</a>. Check out <a href="https://github.com/premake/premake-core/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc">Premake&#x27;s recently closed PR list</a> for the details on how we got there.</p><p>Whew!</p><h4>Alpha-15</h4><p>With inbox zero reached, we also cut <a href="https://github.com/premake/premake-core/releases/tag/v5.0.0-alpha15">a new 5.0 alpha release</a> with over 50 changes and fixes, from over 20 different contributors. Nicely done everyone, and thanks! 🙌</p><h4>Premake5 Stable?</h4><p>Speaking of changes and releases, <a href="https://github.com/premake/premake-core/issues/1423">#1423</a> from <a href="https://github.com/dvzrv">@dvzrz</a> asks whether it&#x27;s (finally) time to cut a stable release of Premake5. Fair question! As I responded on the issue, <a href="https://github.com/samsinsane">@saminsane</a> and I have discussed this before, and our general feeling is that there are too many big, breaking changes that still need to be made.</p><blockquote><p>Gmake/Gmake2 situation needs to be sorted, the Xcode exporter needs to be made fit for use, both Gmake &amp; Xcode need to be made module-friendly, and the toolset abstractions need to be reworked to support more real-world setups. The internal APIs really should be cleaned up and naming conventions standardized for module developers.</p></blockquote><p>Help tackling those areas is, of course, very welcome.</p><p>That said…</p><h4>Back to Next</h4><p>With the PRs cleared and a new alpha released, I&#x27;m now turning my attention back to <a href="https://github.com/starkos/premake-next">premake-next</a>. I&#x27;m going to adjust the plan a bit and focus on getting the new storage and query systems online ASAP. Fixing these two systems is the point of whole exercise, and it seems worth getting more eyes on them sooner than later, even if the configuration blocks have to be manually assembled (i.e. the convenience functions like workspace(), project(), defines(), files(), etc. won&#x27;t be there yet…it will make sense when you see it).</p><h4>So long and thanks for all the fish</h4><p>As ever, big and many thanks to everyone who contributed to alpha-15, and to everyone who continues to support <a href="https://opencollective.com/premake">the Premake OpenCollective</a>, with an extra special 🎉 to new sponsors <a href="https://opencollective.com/emilio-lopez">Emilio Lopez</a> and <a href="https://opencollective.com/benjamin-schlotter">Benjamin Schlotter</a>, and our stalwart benefactor <strong><a href="https://opencollective.com/_fivem">CitizenFX Collective</a></strong>. I wouldn&#x27;t be able to get any of this done without your help, and I truly appreciate it.</p><p>Stay safe!</p><p>~st.</p><p>(Your feedback is welcome and appreciated—come find us at <a href="https://github.com/premake">github.com/premake</a> or <a href="https://twitter.com/premakeapp">@premakeapp</a>.)</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #3]]></title>
        <id>Community Update #3</id>
        <link href="https://premake.github.io/blog/2020/01/08/community-update-3"/>
        <updated>2020-01-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Just a quick update this time: I had big plans for new features this cycle, but ended up getting swamped in end-of-year deadlines, and was only able to deliver a small portion of what I had intended (and late, at that). Still, I did manage a quick port-and-polish of the unit testing module and all of its dependencies, so I'm well positioned to begin the new user scripting API work in earnest. I will be on the road a fair bit over the next quarter, but I'm still optimistic that I can get enough of the new system online to give folks a sense of where things are headed.]]></summary>
        <content type="html"><![CDATA[<p>Just a quick update this time: I had big plans for new features this cycle, but ended up getting swamped in end-of-year deadlines, and was only able to deliver a small portion of what I had intended (and late, at that). Still, I did manage a quick port-and-polish of the unit testing module and all of its dependencies, so I&#x27;m well positioned to begin the new user scripting API work in earnest. I will be on the road a fair bit over the next quarter, but I&#x27;m still optimistic that I can get enough of the new system online to give folks a sense of where things are headed.</p><p>If you haven&#x27;t been following along, you can see what I&#x27;ve been up to, and why, over at <a href="https://github.com/starkos/premake-next">my premake-next repository on GitHub</a>. I&#x27;m also posting regular updates here, as well as at <a href="https://twitter.com/premakeapp">@premakeapp</a>.</p><p>Many thanks to <strong><a href="https://opencollective.com/_fivem">CitizenFX Collective</a></strong> and <strong><a href="https://opencollective.com/industriousone">Industrious One</a></strong>, and to new contributors <strong><a href="https://opencollective.com/renaud-guillard">Renaud Guillard</a>, <a href="https://opencollective.com/wracky">Wracky</a>,</strong> and <strong><a href="https://opencollective.com/micha-titulaer">MiCroN3000</a></strong>. Your generous support makes this possible, and is very much appreciated! 🎉</p><p>~st.</p><p>(Your feedback is welcome and appreciated—come find us at <a href="https://github.com/premake">github.com/premake</a> or <a href="https://twitter.com/premakeapp">@premakeapp</a>.)</p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #2]]></title>
        <id>Community Update #2</id>
        <link href="https://premake.github.io/blog/2019/10/23/ community-update-2"/>
        <updated>2019-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[For this cycle (I work in eight-week cycles and fill in as much Premake work as I can), I completed a long overdue pruning of the pull request backlog. Working up from the oldest, I was able to get it down to just four, all in striking distance of merging and just needing a little follow-up (assistance welcome!). I'll drop a list of all the PRs that were moved at the bottom of this update. Because…]]></summary>
        <content type="html"><![CDATA[<p>For this cycle (I work in eight-week cycles and fill in as much Premake work as I can), I completed a long overdue pruning of <a href="https://github.com/starkos/premake-next/pulls">the pull request backlog</a>. Working up from the oldest, I was able to get it down to just four, all in striking distance of merging and just needing a little follow-up (assistance welcome!). I&#x27;ll drop a list of all the PRs that were moved at the bottom of this update. Because…</p><p>…more importantly, while I have this opportunity to log solid blocks of time to Premake (<a href="https://opencollective.com/premake#section-contributors">thank you!</a>), I&#x27;m taking on its biggest weakness: the project configuration system, the heart of the program that stores your scripted project settings and serves them back to the exporters and actions. The shortcomings in this system are the reason why it&#x27;s so difficult to support per-file configurations, why we struggle to express makefiles succinctly, and why we can&#x27;t do a better job of scaling up to large numbers of platforms/architectures/toolsets/etc. Fixing this fixes many things.</p><p>To get this done in the most expedient way, and with the least disruption, I’ve <a href="https://github.com/starkos/premake-next">spun up a new working space at premake-next</a>. For those interested, you can read more about what I&#x27;m doing, why, and where it&#x27;s all headed <a href="https://github.com/starkos/premake-next">over there</a>. And I’ll also continue posting regular updates <a href="https://opencollective.com/premake">here on the Collective</a>.</p><p>Which brings me to the part where I give a huge THANK YOU! to our continuing sponsors <strong><a href="https://opencollective.com/_fivem">CitizenFX Collective</a></strong> and <a href="https://opencollective.com/industriousone">Industrious One</a>. I would not be able to tackle any of this were it not for your continued support. 🙌</p><p>For the next cycle, I plan to start filling in the details of an improved configuration storage approach and, if possible, merge another <a href="https://github.com/premake/premake-core/pulls">pull request or two</a>.</p><p>~st.</p><p><strong>Completed Tasks:</strong></p><ul><li>Boostrapped <a href="https://github.com/starkos/premake-next">Premake-next</a></li><li>Closed <a href="https://github.com/premake/premake-core/pull/1259">PR #1259</a> with <a href="https://github.com/premake/premake-core/pull/1355">PR #1355</a></li><li>Closed <a href="https://github.com/premake/premake-core/pull/1271">PR #1271</a> with <a href="https://github.com/premake/premake-core/pull/1356">PR #1356</a></li><li>Closed <a href="https://github.com/premake/premake-core/pull/1063">PR #1063</a> with <a href="https://github.com/premake/premake-core/pull/1357">PR #1357</a></li><li>Merged new PRs <a href="https://github.com/premake/premake-core/pull/1345">#1345</a>, <a href="https://github.com/premake/premake-core/pull/1351">1351</a>, <a href="https://github.com/premake/premake-core/pull/1352">1352</a>, <a href="https://github.com/premake/premake-core/pull/1353">1353</a>, <a href="https://github.com/premake/premake-core/pull/1358">1358</a></li><li>Closed <a href="https://github.com/premake/premake-core/issues/38">issue #38</a> and <a href="https://github.com/premake/premake-core/pull/624">PR #624</a> with <a href="https://github.com/premake/premake-core/issues/1344">feature request #1344</a></li><li>Closed <a href="https://github.com/premake/premake-core/issues/237">issue #237</a> and <a href="https://github.com/premake/premake-core/pull/956">PR #956</a> with <a href="https://github.com/premake/premake-core/issues/1346">feature request #1346</a></li><li>Closed stale PRs <a href="https://github.com/premake/premake-core/pull/968">#968</a>, <a href="https://github.com/premake/premake-core/pull/1003">1003</a>, <a href="https://github.com/premake/premake-core/pull/1054">1054</a>, <a href="https://github.com/premake/premake-core/pull/1112">1112</a>, <a href="https://github.com/premake/premake-core/pull/1119">1119</a>, <a href="https://github.com/premake/premake-core/pull/1196">1196</a>, <a href="https://github.com/premake/premake-core/pull/1252">1252</a>, <a href="https://github.com/premake/premake-core/pull/1301">1301</a></li><li>Added new &quot;Get help&quot; and &quot;Ask a question&quot; issue templates; improved &quot;Report a bug&quot; and &quot;Request a feature&quot; templates</li></ul>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community Update #1]]></title>
        <id>Community Update #1</id>
        <link href="https://premake.github.io/blog/2019/08/31/community-update-1"/>
        <updated>2019-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Say hello to the new Premake OpenCollective!]]></summary>
        <content type="html"><![CDATA[<p>Say hello to <a href="https://opencollective.com/premake">the new Premake OpenCollective</a>!</p><p>As I&#x27;m sure you are all too aware, Premake development has slowed to a trickle. I&#x27;ve been taking on more and more client work to keep the books balanced, and there simply isn&#x27;t any useful time left over at the end of the day. A not uncommon problem!</p><p>So I&#x27;m trying an experiment: can we, as a community, create a pool of funding to speed up Premake&#x27;s development? Is there enough interest to make it happen? If so, I would be delighted to transition hours from client work back to Premake, as well as put funds toward bounties and recognizing contributions from the community.</p><p>The experiment is now officially underway. As long as it continues, I&#x27;ll provide regular updates on our progress and upcoming work. This cycle, I was able to…</p><ul><li><p>Set up <a href="https://opencollective.com/premake">this OpenCollective</a>, enabling the Premake project to accept contributions to fund on-going development and community support (<a href="https://github.com/premake/premake-core/pull/1314">#1314</a>, <a href="https://github.com/premake/premake-core/pull/1316">#1316</a>)</p></li><li><p>Register <a href="https://twitter.com/premakeapp">@premakeapp</a> on Twitter for announcements and group communication (and maybe a little self-promotion). Come join us! (<a href="https://github.com/premake/premake-core/pull/1315">#1315</a>)</p></li><li><p>Improve the project on-boarding experience with a new <a href="https://github.com/premake/premake-core/blob/master/README.md">README.md</a> and <a href="https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> (<a href="https://github.com/premake/premake-core/pull/1324">#1324</a>, <a href="https://github.com/premake/premake-core/pull/1325">#1325</a>)</p></li><li><p>Improve the collaboration process with new issue, feature, and pull request templates (<a href="https://github.com/premake/premake-core/pull/1326">#1326</a>, <a href="https://github.com/premake/premake-core/pull/1327">#1327</a>)</p></li></ul><p>I&#x27;m not charging any expenses against the collective this cycle so we can build up a balance to recognize cool or important contributions from the community. You can track our finances and transactions at any time on <a href="https://opencollective.com/premake">our OpenCollective page</a>.</p><p>For the next cycle, I&#x27;d like to show a little maintainer love by working down (and ideally clearing) the <a href="https://github.com/premake/premake-core/pulls">open pull request queue</a> and, time permitting, do a bit of grooming on the <a href="https://github.com/premake/premake-core/issues">open issue list</a> as well. Longer term, I&#x27;ve put a great deal of time and thought into fixing Premake&#x27;s core configuration engine, which is holding back development on a number of important features. I&#x27;ve figured out <a href="https://github.com/industriousone/premake-query">how it should work</a>; now I&#x27;m puzzling over <a href="https://github.com/starkos/premake-next">how to get there</a> from where we are.</p><p>Many thanks to <strong>[CitizenFX Collective]<!-- -->(<a href="https://opencollective.com/_fivem%5D(https://opencollective.com/_fivem)">https://opencollective.com/_fivem](https://opencollective.com/_fivem)</a></strong> and <strong><a href="https://opencollective.com/industriousone">Industrious One</a></strong> for their generous support this cycle. Your contributions make this possible! 🎉</p><p>~st.</p><p><em>(Your feedback is welcome and appreciated—come find us at <a href="https://github.com/premake">github.com/premake</a> or <a href="https://twitter.com/premakeapp">@premakeapp</a>.)</em></p>]]></content>
        <author>
            <name>starkos</name>
            <uri>https://github.com/starkos</uri>
        </author>
    </entry>
</feed>