(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{350:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var a=t(3),o=t(7),i=(t(0),t(446)),r=["components"],c={title:"Command Line Arguments"},l={unversionedId:"Command-Line-Arguments",id:"Command-Line-Arguments",isDocsHomePage:!1,title:"Command Line Arguments",description:"Premake provides the ability to define and handle new command-line arguments from within your project script using the newaction and newoption functions.",source:"@site/docs/Command-Line-Arguments.md",slug:"/Command-Line-Arguments",permalink:"/docs/Command-Line-Arguments",editUrl:"https://github.com/premake/premake-core/edit/master/website/docs/Command-Line-Arguments.md",version:"current",lastUpdatedBy:"KyrietS",lastUpdatedAt:1622582682,sidebar:"docs",previous:{title:"Build Settings",permalink:"/docs/Build-Settings"},next:{title:"Using Modules",permalink:"/docs/Using-Modules"}},s=[{value:"Actions and Options",id:"actions-and-options",children:[]},{value:"Creating New Options",id:"creating-new-options",children:[]},{value:"Creating New Actions",id:"creating-new-actions",children:[]}],p={toc:s};function u(e){var n=e.components,t=Object(o.a)(e,r);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Premake provides the ability to define and handle new command-line arguments from within your project script using the ",Object(i.b)("a",{parentName:"p",href:"/docs/newaction"},"newaction")," and ",Object(i.b)("a",{parentName:"p",href:"/docs/newoption"},"newoption")," functions."),Object(i.b)("h2",{id:"actions-and-options"},"Actions and Options"),Object(i.b)("p",null,"Premake recognizes two types of arguments: ",Object(i.b)("em",{parentName:"p"},"actions")," and ",Object(i.b)("em",{parentName:"p"},"options"),"."),Object(i.b)("p",null,"An ",Object(i.b)("em",{parentName:"p"},"action")," indicates what Premake should do on any given run. For instance, the ",Object(i.b)("inlineCode",{parentName:"p"},"vs2013")," action indicates that Visual Studio 2013 project files should be generated. The ",Object(i.b)("inlineCode",{parentName:"p"},"clean")," action causes all generated files to be deleted. Only one action may be specified at a time."),Object(i.b)("p",null,"An ",Object(i.b)("em",{parentName:"p"},"option")," modifies the behavior of the action. For instance, the ",Object(i.b)("inlineCode",{parentName:"p"},"dotnet")," option is used to change which .NET compiler set is used in the generated files. Options can accept a value, such as ",Object(i.b)("inlineCode",{parentName:"p"},"--dotnet=mono")," or act as a flag, like ",Object(i.b)("inlineCode",{parentName:"p"},"--with-opengl"),"."),Object(i.b)("p",null,"From within your script, you can identify the current action with the ",Object(i.b)("a",{parentName:"p",href:"/docs/_ACTION"},Object(i.b)("inlineCode",{parentName:"a"},"_ACTION"))," global variable, a string value. You can check for an option using the ",Object(i.b)("a",{parentName:"p",href:"/docs/_OPTIONS"},Object(i.b)("inlineCode",{parentName:"a"},"_OPTIONS")),' table, which contains a list of key-value pairs. The key is the option identifier ("dotnet"), which references the command line value ("mono") or an empty string for valueless options.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'-- delete a file if the clean action is running\nif _ACTION == "clean" then\n   -- do something\nend\n\n-- use an option value in a configuration\ntargetdir ( _OPTIONS["outdir"] or "out" )\n')),Object(i.b)("h2",{id:"creating-new-options"},"Creating New Options"),Object(i.b)("p",null,"New command-line options are created using the ",Object(i.b)("a",{parentName:"p",href:"/docs/newoption"},Object(i.b)("inlineCode",{parentName:"a"},"newoption"))," function, passing a table which fully describes the option. This is best illustrated with some examples."),Object(i.b)("p",null,"Here is an option intended to force the use of OpenGL in a 3D application. It serves as a simple flag, and does not take any value."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'newoption {\n   trigger = "with-opengl",\n   description = "Force the use of OpenGL for rendering, regardless of platform"\n}\n')),Object(i.b)("p",null,"Note the commas after each key-value pair; this is required Lua syntax for a table. Once added to your script, the option will appear in the help text, and you may use the trigger as a keyword in your configuration blocks."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'configuration "with-opengl"\n   links { "opengldrv" }\n\nconfiguration "not with-opengl"\n   links { "direct3ddrv" }\n')),Object(i.b)("p",null,"The next example shows an option with a fixed set of allowed values. Like the example above, it is intended to allow the user to specify a 3D API."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'newoption {\n   trigger = "gfxapi",\n   value = "API",\n   description = "Choose a particular 3D API for rendering",\n   allowed = {\n      { "opengl",    "OpenGL" },\n      { "direct3d",  "Direct3D (Windows only)" },\n      { "software",  "Software Renderer" }\n   }\n}\n')),Object(i.b)("p",null,"As before, this new option will be integrated into the help text, along with a description of each of the allowed values. Premake will check the option value at startup, and raise an error on invalid values. The ",Object(i.b)("b",null,"value")," field appears in the help text, and is intended to give the user a clue about the type of value that is expected. In this case, the help text will appear like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"--gfxapi=API      Choose a particular 3D API for rendering; one of:\n    opengl        OpenGL\n    direct3d      Direct3D (Windows only)\n    software      Software Renderer\n")),Object(i.b)("p",null,"Unlike the example above, you now use the ",Object(i.b)("em",{parentName:"p"},"value")," as a keyword in your configuration blocks."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'configuration "opengl"\n   links { "opengldrv" }\n\nconfiguration "direct3d"\n    links { "direct3ddrv" }\n\nconfiguration "software"\n    links { "softwaredrv" }\n')),Object(i.b)("p",null,"Or you could be more clever."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'links { _OPTIONS["gfxapi"] .. "drv" }\n')),Object(i.b)("p",null,"In this example, you would also want to provide a default behavior for the case where no option is specified. You could place a bit of code like this anywhere in your script."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'if not _OPTIONS["gfxapi"] then\n   _OPTIONS["gfxapi"] = "opengl"\nend\n')),Object(i.b)("p",null,"As a last example of options, you may want to specify an option that accepts an unconstrained value, such as an output path. Just leave off the list of allowed values."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'newoption {\n   trigger     = "outdir",\n   value       = "path",\n   description = "Output directory for the compiled executable"\n}\n')),Object(i.b)("h2",{id:"creating-new-actions"},"Creating New Actions"),Object(i.b)("p",null,"Actions are defined in much the same way as options, and can be as simple as this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lua"},'newaction {\n   trigger     = "install",\n   description = "Install the software",\n   execute = function ()\n      -- copy files, etc. here\n   end\n}\n')),Object(i.b)("p",null,"The actual code to be executed when the action is fired should be placed in the ",Object(i.b)("inlineCode",{parentName:"p"},"execute()")," function."),Object(i.b)("p",null,"That's the simple version, which is great for one-off operations that don't need to access to the specific project information. For a tutorial for writing a more complete action, see ",Object(i.b)("a",{parentName:"p",href:"/docs/Adding-New-Action"},"Adding a New Action"),"."))}u.isMDXComponent=!0},446:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),o=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=a,m=u["".concat(r,".").concat(b)]||u[b]||d[b]||i;return t?o.a.createElement(m,c(c({ref:n},s),{},{components:t})):o.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=t[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);